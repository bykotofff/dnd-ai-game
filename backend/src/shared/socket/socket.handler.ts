// backend/src/shared/socket/socket.handler.ts
import { Server as SocketIOServer, Socket } from 'socket.io'
import { AuthService } from '@modules/auth/auth.service'
import { SessionService } from '@modules/sessions/session.service'
import { AIMasterService } from '@modules/game-master/ai-master.service'

interface AuthenticatedSocket extends Socket {
    userId?: string
    username?: string
    currentSessionId?: string
}

interface GameAction {
    type: 'player_action' | 'dice_roll' | 'chat_message' | 'status_update'
    playerId: string
    sessionId: string
    content: string
    metadata?: any
    timestamp: Date
}

interface DiceRoll {
    type: string // d20, d6, etc.
    result: number
    modifier: number
    total: number
    purpose: string // attack, skill_check, etc.
    characterId: string
}

export class SocketHandler {
    private io: SocketIOServer
    private authService: AuthService
    private sessionService: SessionService
    private aiMasterService: AIMasterService
    private connectedUsers: Map<string, string[]> = new Map() // userId -> socketIds
    private sessionRooms: Map<string, Set<string>> = new Map() // sessionId -> userIds

    constructor(io: SocketIOServer) {
        this.io = io
        this.authService = new AuthService()
        this.sessionService = new SessionService()
        this.aiMasterService = new AIMasterService()
    }

    public initialize(): void {
        this.io.use(this.authenticateSocket.bind(this))
        this.io.on('connection', this.handleConnection.bind(this))
        console.log('üîå Socket.IO handler initialized')
    }

    /**
     * Middleware –¥–ª—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ —Å–æ–∫–µ—Ç–æ–≤
     */
    private async authenticateSocket(socket: AuthenticatedSocket, next: Function): Promise<void> {
        try {
            const token = socket.handshake.auth.token

            if (!token) {
                return next(new Error('–¢–æ–∫–µ–Ω –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω'))
            }

            const decoded = await this.authService.verifyToken(token)

            socket.userId = decoded.userId
            socket.username = decoded.username

            next()
        } catch (error) {
            console.error('Socket authentication error:', error)
            next(new Error('–û—à–∏–±–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏'))
        }
    }

    /**
     * –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞
     */
    private handleConnection(socket: AuthenticatedSocket): void {
        const userId = socket.userId!
        console.log(`üéÆ User ${socket.username} connected (${socket.id})`)

        // –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        this.registerUser(userId, socket.id)

        // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
        this.setupEventHandlers(socket)

        // –£–≤–µ–¥–æ–º–ª—è–µ–º –æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏
        socket.emit('connected', {
            message: '–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∏–≥—Ä–æ–≤–æ–º—É —Å–µ—Ä–≤–µ—Ä—É —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ',
            userId: userId,
            socketId: socket.id
        })

        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∏—è
        socket.on('disconnect', () => {
            this.handleDisconnection(socket)
        })
    }

    /**
     * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π
     */
    private setupEventHandlers(socket: AuthenticatedSocket): void {
        const userId = socket.userId!

        // –ü—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∫ –∏–≥—Ä–æ–≤–æ–π —Å–µ—Å—Å–∏–∏
        socket.on('join_session', async (data: { sessionId: string }) => {
            await this.handleJoinSession(socket, data.sessionId)
        })

        // –ü–æ–∫–∏–¥–∞–Ω–∏–µ –∏–≥—Ä–æ–≤–æ–π —Å–µ—Å—Å–∏–∏
        socket.on('leave_session', async (data: { sessionId: string }) => {
            await this.handleLeaveSession(socket, data.sessionId)
        })

        // –ò–≥—Ä–æ–≤–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ
        socket.on('game_action', async (action: GameAction) => {
            await this.handleGameAction(socket, action)
        })

        // –ë—Ä–æ—Å–æ–∫ –∫—É–±–∏–∫–æ–≤
        socket.on('dice_roll', async (diceRoll: DiceRoll) => {
            await this.handleDiceRoll(socket, diceRoll)
        })

        // –°–æ–æ–±—â–µ–Ω–∏–µ –≤ —á–∞—Ç
        socket.on('chat_message', async (data: { sessionId: string, message: string, type?: 'ic' | 'ooc' }) => {
            await this.handleChatMessage(socket, data)
        })

        // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
        socket.on('character_update', async (data: { sessionId: string, characterId: string, updates: any }) => {
            await this.handleCharacterUpdate(socket, data)
        })

        // –ó–∞–ø—Ä–æ—Å —Ç–µ–∫—É—â–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–µ—Å—Å–∏–∏
        socket.on('get_session_state', async (data: { sessionId: string }) => {
            await this.handleGetSessionState(socket, data.sessionId)
        })

        // –ü–∏–Ω–≥ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
        socket.on('ping', () => {
            socket.emit('pong', { timestamp: Date.now() })
        })
    }

    /**
     * –ü—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∫ –∏–≥—Ä–æ–≤–æ–π —Å–µ—Å—Å–∏–∏
     */
    private async handleJoinSession(socket: AuthenticatedSocket, sessionId: string): Promise<void> {
        try {
            const userId = socket.userId!

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø –∫ —Å–µ—Å—Å–∏–∏
            const hasAccess = await this.sessionService.checkUserAccess(sessionId, userId)

            if (!hasAccess) {
                socket.emit('error', { message: '–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –¥–∞–Ω–Ω–æ–π –∏–≥—Ä–æ–≤–æ–π —Å–µ—Å—Å–∏–∏' })
                return
            }

            // –ü–æ–∫–∏–¥–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â—É—é —Å–µ—Å—Å–∏—é –µ—Å–ª–∏ –µ—Å—Ç—å
            if (socket.currentSessionId) {
                await this.handleLeaveSession(socket, socket.currentSessionId)
            }

            // –ü—Ä–∏—Å–æ–µ–¥–∏–Ω—è–µ–º—Å—è –∫ –∫–æ–º–Ω–∞—Ç–µ —Å–µ—Å—Å–∏–∏
            await socket.join(`session_${sessionId}`)
            socket.currentSessionId = sessionId

            // –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –≤ —Å–ø–∏—Å–∫–µ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —Å–µ—Å—Å–∏–∏
            if (!this.sessionRooms.has(sessionId)) {
                this.sessionRooms.set(sessionId, new Set())
            }
            this.sessionRooms.get(sessionId)!.add(userId)

            // –£–≤–µ–¥–æ–º–ª—è–µ–º –≤—Å–µ—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –æ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–∏
            socket.to(`session_${sessionId}`).emit('player_joined', {
                userId: userId,
                username: socket.username,
                timestamp: new Date()
            })

            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
            socket.emit('session_joined', {
                sessionId: sessionId,
                message: '–£—Å–ø–µ—à–Ω–æ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª–∏—Å—å –∫ –∏–≥—Ä–æ–≤–æ–π —Å–µ—Å—Å–∏–∏'
            })

            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–µ—Å—Å–∏–∏
            await this.sendSessionState(socket, sessionId)

            console.log(`üë• User ${socket.username} joined session ${sessionId}`)
        } catch (error) {
            console.error('Join session error:', error)
            socket.emit('error', { message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–∏ –∫ —Å–µ—Å—Å–∏–∏' })
        }
    }

    /**
     * –ü–æ–∫–∏–¥–∞–Ω–∏–µ –∏–≥—Ä–æ–≤–æ–π —Å–µ—Å—Å–∏–∏
     */
    private async handleLeaveSession(socket: AuthenticatedSocket, sessionId: string): Promise<void> {
        try {
            const userId = socket.userId!

            // –ü–æ–∫–∏–¥–∞–µ–º –∫–æ–º–Ω–∞—Ç—É
            await socket.leave(`session_${sessionId}`)

            // –£–¥–∞–ª—è–µ–º –∏–∑ —Å–ø–∏—Å–∫–∞ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
            if (this.sessionRooms.has(sessionId)) {
                this.sessionRooms.get(sessionId)!.delete(userId)

                // –£–¥–∞–ª—è–µ–º –ø—É—Å—Ç—ã–µ —Å–µ—Å—Å–∏–∏
                if (this.sessionRooms.get(sessionId)!.size === 0) {
                    this.sessionRooms.delete(sessionId)
                }
            }

            // –£–≤–µ–¥–æ–º–ª—è–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –æ –≤—ã—Ö–æ–¥–µ
            socket.to(`session_${sessionId}`).emit('player_left', {
                userId: userId,
                username: socket.username,
                timestamp: new Date()
            })

            socket.currentSessionId = undefined

            console.log(`üëã User ${socket.username} left session ${sessionId}`)
        } catch (error) {
            console.error('Leave session error:', error)
        }
    }

    /**
     * –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–≥—Ä–æ–≤–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è
     */
    private async handleGameAction(socket: AuthenticatedSocket, action: GameAction): Promise<void> {
        try {
            const userId = socket.userId!

            // –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–µ–π—Å—Ç–≤–∏—è
            if (!action.sessionId || !action.content) {
                socket.emit('error', { message: '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è' })
                return
            }

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø –∫ —Å–µ—Å—Å–∏–∏
            const hasAccess = await this.sessionService.checkUserAccess(action.sessionId, userId)
            if (!hasAccess) {
                socket.emit('error', { message: '–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –¥–∞–Ω–Ω–æ–π —Å–µ—Å—Å–∏–∏' })
                return
            }

            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–µ–π—Å—Ç–≤–∏–µ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
            await this.sessionService.logAction({
                sessionId: action.sessionId,
                characterId: action.playerId,
                actionType: action.type,
                content: action.content,
                metadata: action.metadata
            })

            // –†–∞—Å—Å—ã–ª–∞–µ–º –¥–µ–π—Å—Ç–≤–∏–µ –≤—Å–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–∞–º —Å–µ—Å—Å–∏–∏
            this.io.to(`session_${action.sessionId}`).emit('game_action', {
                ...action,
                playerId: userId,
                playerName: socket.username,
                timestamp: new Date()
            })

            // –ï—Å–ª–∏ —ç—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –∏–≥—Ä–æ–∫–∞, –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç –ò–ò –º–∞—Å—Ç–µ—Ä–∞
            if (action.type === 'player_action') {
                try {
                    const aiResponse = await this.aiMasterService.processPlayerAction({
                        sessionId: action.sessionId,
                        requestType: 'player_action_response',
                        playerAction: action.content,
                        characterId: action.playerId,
                        additionalContext: action.metadata
                    })

                    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –ò–ò –≤—Å–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–∞–º
                    this.io.to(`session_${action.sessionId}`).emit('ai_response', {
                        responseId: aiResponse.id,
                        content: aiResponse.content,
                        suggestions: aiResponse.suggestions,
                        diceRollsRequired: aiResponse.diceRollsRequired,
                        sceneUpdates: aiResponse.sceneUpdates,
                        timestamp: aiResponse.timestamp
                    })

                } catch (aiError) {
                    console.error('AI Master error:', aiError)
                    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º fallback –æ—Ç–≤–µ—Ç
                    this.io.to(`session_${action.sessionId}`).emit('ai_response', {
                        responseId: `fallback_${Date.now()}`,
                        content: '–ú–∞—Å—Ç–µ—Ä –∏–≥—Ä—ã –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –∏–≥—Ä—É!',
                        timestamp: new Date()
                    })
                }
            }

            console.log(`üéØ Game action from ${socket.username} in session ${action.sessionId}: ${action.content}`)
        } catch (error) {
            console.error('Game action error:', error)
            socket.emit('error', { message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–µ–π—Å—Ç–≤–∏—è' })
        }
    }

    /**
     * –û–±—Ä–∞–±–æ—Ç–∫–∞ –±—Ä–æ—Å–∫–∞ –∫—É–±–∏–∫–æ–≤
     */
    private async handleDiceRoll(socket: AuthenticatedSocket, diceRoll: DiceRoll): Promise<void> {
        try {
            const userId = socket.userId!

            // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –≤–∞–ª–∏–¥–∞—Ü–∏—é –±—Ä–æ—Å–∫–∞
            const rollResult = {
                ...diceRoll,
                playerId: userId,
                playerName: socket.username,
                timestamp: new Date()
            }

            // –†–∞—Å—Å—ã–ª–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –±—Ä–æ—Å–∫–∞
            if (socket.currentSessionId) {
                this.io.to(`session_${socket.currentSessionId}`).emit('dice_roll', rollResult)

                // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ª–æ–≥ –¥–µ–π—Å—Ç–≤–∏–π
                await this.sessionService.logAction({
                    sessionId: socket.currentSessionId,
                    characterId: diceRoll.characterId,
                    actionType: 'dice_roll',
                    content: `–ë—Ä–æ—Å–æ–∫ ${diceRoll.type}: ${diceRoll.result} + ${diceRoll.modifier} = ${diceRoll.total}`,
                    metadata: { diceRoll }
                })
            }

            console.log(`üé≤ Dice roll from ${socket.username}: ${diceRoll.type} = ${diceRoll.total}`)
        } catch (error) {
            console.error('Dice roll error:', error)
            socket.emit('error', { message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –±—Ä–æ—Å–∫–∞' })
        }
    }

    /**
     * –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —á–∞—Ç
     */
    private async handleChatMessage(socket: AuthenticatedSocket, data: { sessionId: string, message: string, type?: 'ic' | 'ooc' }): Promise<void> {
        try {
            const userId = socket.userId!

            const chatMessage = {
                sessionId: data.sessionId,
                playerId: userId,
                playerName: socket.username,
                message: data.message,
                type: data.type || 'ooc',
                timestamp: new Date()
            }

            // –†–∞—Å—Å—ã–ª–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —É—á–∞—Å—Ç–Ω–∏–∫–∞–º
            this.io.to(`session_${data.sessionId}`).emit('chat_message', chatMessage)

            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ª–æ–≥
            await this.sessionService.logAction({
                sessionId: data.sessionId,
                characterId: null,
                actionType: 'chat_message',
                content: data.message,
                metadata: { type: data.type }
            })
        } catch (error) {
            console.error('Chat message error:', error)
            socket.emit('error', { message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è' })
        }
    }

    /**
     * –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
     */
    private async handleCharacterUpdate(socket: AuthenticatedSocket, data: { sessionId: string, characterId: string, updates: any }): Promise<void> {
        try {
            // –†–∞—Å—Å—ã–ª–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —É—á–∞—Å—Ç–Ω–∏–∫–∞–º —Å–µ—Å—Å–∏–∏
            socket.to(`session_${data.sessionId}`).emit('character_update', {
                characterId: data.characterId,
                updates: data.updates,
                updatedBy: socket.username,
                timestamp: new Date()
            })
        } catch (error) {
            console.error('Character update error:', error)
        }
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–µ—Å—Å–∏–∏
     */
    private async handleGetSessionState(socket: AuthenticatedSocket, sessionId: string): Promise<void> {
        try {
            await this.sendSessionState(socket, sessionId)
        } catch (error) {
            console.error('Get session state error:', error)
            socket.emit('error', { message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–µ—Å—Å–∏–∏' })
        }
    }

    /**
     * –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–µ—Å—Å–∏–∏
     */
    private async sendSessionState(socket: AuthenticatedSocket, sessionId: string): Promise<void> {
        try {
            const sessionState = await this.sessionService.getSessionState(sessionId)
            const connectedPlayers = Array.from(this.sessionRooms.get(sessionId) || [])

            socket.emit('session_state', {
                session: sessionState,
                connectedPlayers: connectedPlayers,
                timestamp: new Date()
            })
        } catch (error) {
            console.error('Send session state error:', error)
            socket.emit('error', { message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–µ—Å—Å–∏–∏' })
        }
    }

    /**
     * –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞
     */
    private handleDisconnection(socket: AuthenticatedSocket): void {
        const userId = socket.userId!

        console.log(`üíî User ${socket.username} disconnected (${socket.id})`)

        // –£–¥–∞–ª—è–µ–º –∏–∑ —Å–ø–∏—Å–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        this.unregisterUser(userId, socket.id)

        // –ü–æ–∫–∏–¥–∞–µ–º —Ç–µ–∫—É—â—É—é —Å–µ—Å—Å–∏—é –µ—Å–ª–∏ –µ—Å—Ç—å
        if (socket.currentSessionId) {
            this.handleLeaveSession(socket, socket.currentSessionId)
        }
    }

    /**
     * –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     */
    private registerUser(userId: string, socketId: string): void {
        if (!this.connectedUsers.has(userId)) {
            this.connectedUsers.set(userId, [])
        }
        this.connectedUsers.get(userId)!.push(socketId)
    }

    /**
     * –û—Ç–º–µ–Ω–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     */
    private unregisterUser(userId: string, socketId: string): void {
        if (this.connectedUsers.has(userId)) {
            const sockets = this.connectedUsers.get(userId)!
            const index = sockets.indexOf(socketId)
            if (index > -1) {
                sockets.splice(index, 1)
            }

            if (sockets.length === 0) {
                this.connectedUsers.delete(userId)
            }
        }
    }

    /**
     * –ü—É–±–ª–∏—á–Ω—ã–µ –º–µ—Ç–æ–¥—ã –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –¥—Ä—É–≥–∏–º–∏ –º–æ–¥—É–ª—è–º–∏
     */

    /**
     * –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
     */
    public sendToUser(userId: string, event: string, data: any): void {
        const userSockets = this.connectedUsers.get(userId)
        if (userSockets) {
            userSockets.forEach(socketId => {
                this.io.to(socketId).emit(event, data)
            })
        }
    }

    /**
     * –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤—Å–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–∞–º —Å–µ—Å—Å–∏–∏
     */
    public sendToSession(sessionId: string, event: string, data: any): void {
        this.io.to(`session_${sessionId}`).emit(event, data)
    }

    /**
     * –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ —Ö–æ–¥–∞ –∏–≥—Ä–æ–∫–∞
     */
    public notifyPlayerTurn(sessionId: string, playerId: string, playerName: string): void {
        this.sendToSession(sessionId, 'player_turn', {
            playerId,
            playerName,
            message: `–•–æ–¥ –∏–≥—Ä–æ–∫–∞ ${playerName}`,
            timestamp: new Date()
        })
    }

    /**
     * –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∏–Ω–∏—Ü–∏–∞—Ç–∏–≤—ã
     */
    public notifyInitiativeUpdate(sessionId: string, initiativeOrder: any[]): void {
        this.sendToSession(sessionId, 'initiative_update', {
            initiativeOrder,
            timestamp: new Date()
        })
    }

    /**
     * –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ/–∫–æ–Ω—Ü–µ –±–æ—è
     */
    public notifyCombatStateChange(sessionId: string, inCombat: boolean, round?: number): void {
        this.sendToSession(sessionId, 'combat_state_change', {
            inCombat,
            round,
            timestamp: new Date()
        })
    }

    /**
     * –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å—Ü–µ–Ω—ã
     */
    public notifySceneChange(sessionId: string, newScene: string, description: string): void {
        this.sendToSession(sessionId, 'scene_change', {
            scene: newScene,
            description,
            timestamp: new Date()
        })
    }

    /**
     * –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∫–≤–µ—Å—Ç–∞
     */
    public notifyQuestUpdate(sessionId: string, questUpdate: any): void {
        this.sendToSession(sessionId, 'quest_update', {
            ...questUpdate,
            timestamp: new Date()
        })
    }

    /**
     * –ú–∞—Å—Å–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Å–æ–±—ã—Ç–∏–∏ –≤ –∏–≥—Ä–µ
     */
    public broadcastGameEvent(sessionId: string, eventType: string, eventData: any): void {
        this.sendToSession(sessionId, 'game_event', {
            type: eventType,
            data: eventData,
            timestamp: new Date()
        })
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π
     */
    public getConnectionStats(): {
        totalConnections: number
        activeSessions: number
        userSessions: { [sessionId: string]: number }
    } {
        const userSessions: { [sessionId: string]: number } = {}

        for (const [sessionId, users] of this.sessionRooms.entries()) {
            userSessions[sessionId] = users.size
        }

        return {
            totalConnections: this.connectedUsers.size,
            activeSessions: this.sessionRooms.size,
            userSessions
        }
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä–∫–∞, –ø–æ–¥–∫–ª—é—á–µ–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
     */
    public isUserConnected(userId: string): boolean {
        return this.connectedUsers.has(userId)
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ —Å–µ—Å—Å–∏–∏
     */
    public getSessionUsers(sessionId: string): string[] {
        return Array.from(this.sessionRooms.get(sessionId) || [])
    }

    /**
     * –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ—Ç–∫–ª—é—á–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     */
    public disconnectUser(userId: string, reason: string): void {
        const userSockets = this.connectedUsers.get(userId)
        if (userSockets) {
            userSockets.forEach(socketId => {
                const socket = this.io.sockets.sockets.get(socketId)
                if (socket) {
                    socket.emit('force_disconnect', { reason })
                    socket.disconnect(true)
                }
            })
        }
    }

    /**
     * –û—á–∏—Å—Ç–∫–∞ –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
     */
    public cleanupInactiveConnections(): void {
        // –£–¥–∞–ª—è–µ–º —Å–æ–∫–µ—Ç—ã, –∫–æ—Ç–æ—Ä—ã–µ –±–æ–ª—å—à–µ –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω—ã
        for (const [userId, socketIds] of this.connectedUsers.entries()) {
            const activeSockets = socketIds.filter(socketId => {
                return this.io.sockets.sockets.has(socketId)
            })

            if (activeSockets.length === 0) {
                this.connectedUsers.delete(userId)
            } else if (activeSockets.length !== socketIds.length) {
                this.connectedUsers.set(userId, activeSockets)
            }
        }

        // –û—á–∏—â–∞–µ–º –ø—É—Å—Ç—ã–µ —Å–µ—Å—Å–∏–∏
        for (const [sessionId, users] of this.sessionRooms.entries()) {
            if (users.size === 0) {
                this.sessionRooms.delete(sessionId)
            }
        }
    }
}