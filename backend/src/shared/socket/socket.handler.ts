// backend/src/shared/socket/socket.handler.ts
import { Server as SocketIOServer, Socket } from 'socket.io'
import { AuthService } from '@modules/auth/auth.service'
import { SessionService } from '@modules/sessions/session.service'
import { AIMasterService } from '@modules/game-master/ai-master.service'

interface AuthenticatedSocket extends Socket {
    userId?: string
    username?: string
    currentSessionId?: string
}

interface GameAction {
    type: 'player_action' | 'dice_roll' | 'chat_message' | 'status_update'
    playerId: string
    sessionId: string
    content: string
    metadata?: any
    timestamp: Date
}

interface DiceRoll {
    type: string // d20, d6, etc.
    result: number
    modifier: number
    total: number
    purpose: string // attack, skill_check, etc.
    characterId: string
}

export class SocketHandler {
    private io: SocketIOServer
    private authService: AuthService
    private sessionService: SessionService
    private aiMasterService: AIMasterService
    private connectedUsers: Map<string, string[]> = new Map() // userId -> socketIds
    private sessionRooms: Map<string, Set<string>> = new Map() // sessionId -> userIds

    constructor(io: SocketIOServer) {
        this.io = io
        this.authService = new AuthService()
        this.sessionService = new SessionService()
        this.aiMasterService = new AIMasterService()
    }

    public initialize(): void {
        this.io.use(this.authenticateSocket.bind(this))
        console.log('üîå Socket.IO handler initialized')
    }

    /**
     * –ü—É–±–ª–∏—á–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π
     */
    public handleSocketConnection(socket: AuthenticatedSocket): void {
        this.handleConnection(socket)
    }

    /**
     * Middleware –¥–ª—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ —Å–æ–∫–µ—Ç–æ–≤
     */
    private async authenticateSocket(socket: AuthenticatedSocket, next: Function): Promise<void> {
        try {
            const token = socket.handshake.auth.token

            if (!token) {
                return next(new Error('–¢–æ–∫–µ–Ω –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω'))
            }

            const decoded = await this.authService.verifyToken(token)

            socket.userId = decoded.userId
            socket.username = decoded.username

            next()
        } catch (error) {
            console.error('Socket authentication error:', error)
            next(new Error('–û—à–∏–±–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏'))
        }
    }

    /**
     * –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞
     */
    private handleConnection(socket: AuthenticatedSocket): void {
        const userId = socket.userId!
        const username = socket.username!

        console.log(`üîå User ${username} (${userId}) connected with socket ${socket.id}`)

        // –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–∫–µ—Ç –∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        if (!this.connectedUsers.has(userId)) {
            this.connectedUsers.set(userId, [])
        }
        this.connectedUsers.get(userId)!.push(socket.id)

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
        socket.emit('connected', {
            userId,
            username,
            timestamp: new Date()
        })

        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
        this.setupEventHandlers(socket)

        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∏—è
        socket.on('disconnect', () => {
            this.handleDisconnection(socket)
        })
    }

    /**
     * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π
     */
    private setupEventHandlers(socket: AuthenticatedSocket): void {
        const userId = socket.userId!

        // –ü—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∫ –∏–≥—Ä–æ–≤–æ–π —Å–µ—Å—Å–∏–∏
        socket.on('join_session', async (data: { sessionId: string, characterId?: string }) => {
            try {
                await this.handleJoinSession(socket, data)
            } catch (error) {
                socket.emit('error', {
                    code: 'JOIN_SESSION_ERROR',
                    message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–∏ –∫ —Å–µ—Å—Å–∏–∏',
                    details: error
                })
            }
        })

        // –ü–æ–∫–∏–¥–∞–Ω–∏–µ –∏–≥—Ä–æ–≤–æ–π —Å–µ—Å—Å–∏–∏
        socket.on('leave_session', async (data: { sessionId: string }) => {
            try {
                await this.handleLeaveSession(socket, data)
            } catch (error) {
                socket.emit('error', {
                    code: 'LEAVE_SESSION_ERROR',
                    message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∏–¥–∞–Ω–∏–∏ —Å–µ—Å—Å–∏–∏',
                    details: error
                })
            }
        })

        // –ò–≥—Ä–æ–≤–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ
        socket.on('game_action', async (action: GameAction) => {
            try {
                await this.handleGameAction(socket, action)
            } catch (error) {
                socket.emit('error', {
                    code: 'GAME_ACTION_ERROR',
                    message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∏–≥—Ä–æ–≤–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è',
                    details: error
                })
            }
        })

        // –ë—Ä–æ—Å–æ–∫ –∫—É–±–∏–∫–∞
        socket.on('dice_roll', async (rollData: DiceRoll) => {
            try {
                await this.handleDiceRoll(socket, rollData)
            } catch (error) {
                socket.emit('error', {
                    code: 'DICE_ROLL_ERROR',
                    message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –±—Ä–æ—Å–∫–µ –∫—É–±–∏–∫–∞',
                    details: error
                })
            }
        })

        // –°–æ–æ–±—â–µ–Ω–∏–µ –≤ —á–∞—Ç–µ
        socket.on('chat_message', async (messageData: any) => {
            try {
                await this.handleChatMessage(socket, messageData)
            } catch (error) {
                socket.emit('error', {
                    code: 'CHAT_MESSAGE_ERROR',
                    message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è',
                    details: error
                })
            }
        })

        // Ping-pong –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
        socket.on('ping', () => {
            socket.emit('pong', { timestamp: new Date() })
        })
    }

    /**
     * –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –∫ —Å–µ—Å—Å–∏–∏
     */
    private async handleJoinSession(socket: AuthenticatedSocket, data: { sessionId: string, characterId?: string }): Promise<void> {
        const { sessionId, characterId } = data
        const userId = socket.userId!

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Å–µ—Å—Å–∏–∏
        const session = await this.sessionService.getSession(sessionId)
        if (!session) {
            throw new Error('–°–µ—Å—Å–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞')
        }

        // –ü—Ä–∏—Å–æ–µ–¥–∏–Ω—è–µ–º –∫ –∫–æ–º–Ω–∞—Ç–µ
        socket.join(`session_${sessionId}`)
        socket.currentSessionId = sessionId

        // –î–æ–±–∞–≤–ª—è–µ–º –≤ —Å–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å–µ—Å—Å–∏–∏
        if (!this.sessionRooms.has(sessionId)) {
            this.sessionRooms.set(sessionId, new Set())
        }
        this.sessionRooms.get(sessionId)!.add(userId)

        // –£–≤–µ–¥–æ–º–ª—è–µ–º –¥—Ä—É–≥–∏—Ö –∏–≥—Ä–æ–∫–æ–≤
        socket.to(`session_${sessionId}`).emit('player_joined', {
            userId,
            username: socket.username,
            characterId,
            timestamp: new Date()
        })

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–µ—Å—Å–∏–∏
        const sessionState = await this.sessionService.getSessionState(sessionId)
        socket.emit('session_joined', {
            sessionId,
            state: sessionState,
            timestamp: new Date()
        })

        console.log(`üë• User ${socket.username} joined session ${sessionId}`)
    }

    /**
     * –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–∫–∏–¥–∞–Ω–∏—è —Å–µ—Å—Å–∏–∏
     */
    private async handleLeaveSession(socket: AuthenticatedSocket, data: { sessionId: string }): Promise<void> {
        const { sessionId } = data
        const userId = socket.userId!

        socket.leave(`session_${sessionId}`)
        socket.currentSessionId = undefined

        // –£–¥–∞–ª—è–µ–º –∏–∑ —Å–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        if (this.sessionRooms.has(sessionId)) {
            this.sessionRooms.get(sessionId)!.delete(userId)
            if (this.sessionRooms.get(sessionId)!.size === 0) {
                this.sessionRooms.delete(sessionId)
            }
        }

        // –£–≤–µ–¥–æ–º–ª—è–µ–º –¥—Ä—É–≥–∏—Ö –∏–≥—Ä–æ–∫–æ–≤
        socket.to(`session_${sessionId}`).emit('player_left', {
            userId,
            username: socket.username,
            timestamp: new Date()
        })

        console.log(`üëã User ${socket.username} left session ${sessionId}`)
    }

    /**
     * –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–≥—Ä–æ–≤–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è
     */
    private async handleGameAction(socket: AuthenticatedSocket, action: GameAction): Promise<void> {
        const sessionId = socket.currentSessionId

        if (!sessionId) {
            throw new Error('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Å–µ—Å—Å–∏–∏')
        }

        // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¥–µ–π—Å—Ç–≤–∏–µ —á–µ—Ä–µ–∑ –ò–ò –º–∞—Å—Ç–µ—Ä–∞
        const response = await this.aiMasterService.processPlayerAction(action)

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤—Å–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–∞–º —Å–µ—Å—Å–∏–∏
        this.io.to(`session_${sessionId}`).emit('game_event', {
            type: 'player_action_result',
            action,
            response,
            timestamp: new Date()
        })
    }

    /**
     * –û–±—Ä–∞–±–æ—Ç–∫–∞ –±—Ä–æ—Å–∫–∞ –∫—É–±–∏–∫–∞
     */
    private async handleDiceRoll(socket: AuthenticatedSocket, rollData: DiceRoll): Promise<void> {
        const sessionId = socket.currentSessionId

        if (!sessionId) {
            throw new Error('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Å–µ—Å—Å–∏–∏')
        }

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –±—Ä–æ—Å–∫–∞ –≤—Å–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–∞–º
        this.io.to(`session_${sessionId}`).emit('dice_roll_result', {
            ...rollData,
            username: socket.username,
            timestamp: new Date()
        })
    }

    /**
     * –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —á–∞—Ç–µ
     */
    private async handleChatMessage(socket: AuthenticatedSocket, messageData: any): Promise<void> {
        const sessionId = socket.currentSessionId

        if (!sessionId) {
            throw new Error('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Å–µ—Å—Å–∏–∏')
        }

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤—Å–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–∞–º —Å–µ—Å—Å–∏–∏
        this.io.to(`session_${sessionId}`).emit('chat_message', {
            ...messageData,
            userId: socket.userId,
            username: socket.username,
            timestamp: new Date()
        })
    }

    /**
     * –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∏—è
     */
    private handleDisconnection(socket: AuthenticatedSocket): void {
        const userId = socket.userId!
        const username = socket.username!

        console.log(`üîå User ${username} (${userId}) disconnected`)

        // –£–¥–∞–ª—è–µ–º —Å–æ–∫–µ—Ç –∏–∑ —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if (this.connectedUsers.has(userId)) {
            const userSockets = this.connectedUsers.get(userId)!
            const socketIndex = userSockets.indexOf(socket.id)
            if (socketIndex > -1) {
                userSockets.splice(socketIndex, 1)
            }

            // –ï—Å–ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –±–æ–ª—å—à–µ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–æ–∫–µ—Ç–æ–≤
            if (userSockets.length === 0) {
                this.connectedUsers.delete(userId)

                // –£–≤–µ–¥–æ–º–ª—è–µ–º –æ –ø–æ–∫–∏–¥–∞–Ω–∏–∏ —Å–µ—Å—Å–∏–∏, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –±—ã–ª –≤ –Ω–µ–π
                if (socket.currentSessionId) {
                    this.handleLeaveSession(socket, { sessionId: socket.currentSessionId })
                }
            }
        }
    }
}