// backend/src/app.ts
import express, { Application } from 'express'
import cors from 'cors'
import helmet from 'helmet'
import { createServer } from 'http'
import { Server as SocketIOServer } from 'socket.io'
import dotenv from 'dotenv'

// –ò–º–ø–æ—Ä—Ç—ã –º–æ–¥—É–ª–µ–π
import { DatabaseService } from '@shared/database/database.service'
import { AuthModule } from '@modules/auth/auth.module'
import { CharacterModule } from '@modules/characters/character.module'
import { SessionModule } from '@modules/sessions/session.module'
import { AIMasterModule } from '@modules/game-master/ai-master.module'
import { DiceModule } from '@modules/dice/dice.module'
import { QuestModule } from '@modules/quests/quest.module'
import { ImageModule } from '@modules/images/image.module'

// –ò–º–ø–æ—Ä—Ç Socket.IO –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞
import { SocketHandler } from '@shared/socket/socket.handler'

// –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
dotenv.config()

class App {
    public app: Application
    public server
    public io: SocketIOServer
    private databaseService: DatabaseService
    private socketHandler: SocketHandler

    constructor() {
        this.app = express()
        this.server = createServer(this.app)
        this.io = new SocketIOServer(this.server, {
            cors: {
                origin: process.env.FRONTEND_URL || "http://localhost:3000",
                methods: ["GET", "POST"]
            }
        })

        this.databaseService = new DatabaseService()
        this.socketHandler = new SocketHandler(this.io)

        this.initializeMiddlewares()
        this.initializeRoutes()
        this.initializeSocketIO()
        this.initializeErrorHandling()
    }

    private initializeMiddlewares(): void {
        // –ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å
        this.app.use(helmet())

        // CORS
        this.app.use(cors({
            origin: process.env.FRONTEND_URL || "http://localhost:3000",
            credentials: true
        }))

        // –ü–∞—Ä—Å–∏–Ω–≥ JSON
        this.app.use(express.json({ limit: '10mb' }))
        this.app.use(express.urlencoded({ extended: true, limit: '10mb' }))

        // –°—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ñ–∞–π–ª—ã
        this.app.use('/uploads', express.static('uploads'))

        // –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–æ–≤
        this.app.use((req, res, next) => {
            console.log(`${new Date().toISOString()} - ${req.method} ${req.path}`)
            next()
        })
    }

    private initializeRoutes(): void {
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        this.app.get('/health', (req, res) => {
            res.status(200).json({
                status: 'ok',
                timestamp: new Date().toISOString(),
                uptime: process.uptime(),
                environment: process.env.NODE_ENV || 'development'
            })
        })

        // API —Ä–æ—É—Ç—ã
        this.app.use('/api/auth', new AuthModule().router)
        this.app.use('/api/characters', new CharacterModule().router)
        this.app.use('/api/sessions', new SessionModule().router)
        this.app.use('/api/game-master', new AIMasterModule().router)
        this.app.use('/api/dice', new DiceModule().router)
        this.app.use('/api/quests', new QuestModule().router)
        this.app.use('/api/images', new ImageModule().router)

        // 404 –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
        this.app.use('*', (req, res) => {
            res.status(404).json({
                success: false,
                error: '–ú–∞—Ä—à—Ä—É—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω',
                path: req.originalUrl
            })
        })
    }

    private initializeSocketIO(): void {
        this.io.on('connection', (socket) => {
            console.log(`üîå –ö–ª–∏–µ–Ω—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω: ${socket.id}`)

            // –ü–µ—Ä–µ–¥–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –≤ SocketHandler
            this.socketHandler.handleConnection(socket)
        })
    }

    private initializeErrorHandling(): void {
        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –æ—à–∏–±–æ–∫
        this.app.use((error: Error, req: express.Request, res: express.Response, next: express.NextFunction) => {
            console.error('üî• –ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞:', error)

            res.status(500).json({
                success: false,
                error: process.env.NODE_ENV === 'production'
                    ? '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞'
                    : error.message,
                ...(process.env.NODE_ENV !== 'production' && { stack: error.stack })
            })
        })

        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –ø—Ä–æ–º–∏—Å–æ–≤
        process.on('unhandledRejection', (reason, promise) => {
            console.error('üî• –ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –ø—Ä–æ–º–∏—Å–∞:', reason)
        })

        process.on('uncaughtException', (error) => {
            console.error('üî• –ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–µ –∏—Å–∫–ª—é—á–µ–Ω–∏–µ:', error)
            process.exit(1)
        })
    }

    public async start(): Promise<void> {
        try {
            // –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
            await this.databaseService.connect()

            const port = process.env.PORT || 3001

            this.server.listen(port, () => {
                console.log(`üöÄ –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${port}`)
                console.log(`üìä –†–µ–∂–∏–º: ${process.env.NODE_ENV || 'development'}`)
                console.log(`üîó Health check: http://localhost:${port}/health`)
            })
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞:', error)
            process.exit(1)
        }
    }

    public async stop(): Promise<void> {
        try {
            await this.databaseService.disconnect()
            this.server.close()
            console.log('‚úÖ –°–µ—Ä–≤–µ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω')
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ —Å–µ—Ä–≤–µ—Ä–∞:', error)
        }
    }
}

// –°–æ–∑–¥–∞–Ω–∏–µ –∏ –∑–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
const app = new App()

// Graceful shutdown
process.on('SIGTERM', async () => {
    console.log('üìù –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª SIGTERM, –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–µ—Ä–≤–µ—Ä...')
    await app.stop()
})

process.on('SIGINT', async () => {
    console.log('üìù –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª SIGINT, –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–µ—Ä–≤–µ—Ä...')
    await app.stop()
})

// –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
app.start()

export default app