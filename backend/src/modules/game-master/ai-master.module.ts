// backend/src/modules/game-master/ai-master.module.ts
import { aiMasterRouter } from './ai-master.router'
import { AIMasterService } from './ai-master.service'
import { AIMasterController } from './ai-master.controller'
import { OllamaService } from './ollama.service'
import { PromptLibraryService } from './prompt-library'

/**
 * AI Master Module - —Ü–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–∞—è —Ç–æ—á–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ –ò–ò –º–∞—Å—Ç–µ—Ä–∞
 */
export class AIMasterModule {
    public static router = aiMasterRouter
    public static service = new AIMasterService()
    public static controller = new AIMasterController()

    /**
     * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–æ–¥—É–ª—è
     */
    public static async initialize(): Promise<void> {
        try {
            console.log('ü§ñ Initializing AI Master module...')

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å Ollama
            const ollamaService = new OllamaService()
            const isOllamaHealthy = await ollamaService.checkHealth()

            if (!isOllamaHealthy) {
                console.warn('‚ö†Ô∏è Ollama is not available. AI features will be limited.')
            } else {
                console.log('‚úÖ Ollama connection established')

                // –ü—Ä–µ–¥–∑–∞–≥—Ä—É–∂–∞–µ–º –º–æ–¥–µ–ª–∏
                try {
                    await this.service.preloadModels()
                } catch (error) {
                    console.warn('‚ö†Ô∏è Model preloading failed:', error)
                }
            }

            // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–∏–±–ª–∏–æ—Ç–µ–∫—É –ø—Ä–æ–º–ø—Ç–æ–≤
            const promptLibrary = PromptLibraryService.getInstance()
            console.log('üìö Prompt library initialized')

            console.log('üé≠ AI Master module initialized successfully')
        } catch (error) {
            console.error('‚ùå Failed to initialize AI Master module:', error)
            // –ù–µ –≤—ã–±—Ä–∞—Å—ã–≤–∞–µ–º –æ—à–∏–±–∫—É, —á—Ç–æ–±—ã –æ—Å—Ç–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –º–æ–≥–ª–∞ —Ä–∞–±–æ—Ç–∞—Ç—å
        }
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ —Å–µ—Ä–≤–∏—Å–∞
     */
    public static getService(): AIMasterService {
        return this.service
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä–∫–∞ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –ò–ò —Å–∏—Å—Ç–µ–º—ã
     */
    public static async checkReadiness(): Promise<{
        ready: boolean
        ollama: boolean
        models: string[]
        prompts: number
    }> {
        try {
            const health = await this.service.checkHealth()
            const promptLibrary = PromptLibraryService.getInstance()
            const prompts = Object.keys(promptLibrary.getAllPrompts()).length

            return {
                ready: health.ollama && health.models.length > 0,
                ollama: health.ollama,
                models: health.models,
                prompts
            }
        } catch (error) {
            console.error('Error checking AI readiness:', error)
            return {
                ready: false,
                ollama: false,
                models: [],
                prompts: 0
            }
        }
    }

    /**
     * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –ò–ò
     */
    public static async updateConfig(newConfig: any): Promise<void> {
        try {
            // TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
            console.log('üîß AI configuration updated')
        } catch (error) {
            console.error('Failed to update AI config:', error)
            throw error
        }
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –º–µ—Ç—Ä–∏–∫ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
     */
    public static async getPerformanceMetrics(): Promise<{
        totalRequests: number
        averageResponseTime: number
        cacheHitRate: number
        modelUtilization: Record<string, number>
    }> {
        try {
            const stats = await this.service.getUsageStats()
            const cacheInfo = this.service.getCacheInfo()

            // –í—ã—á–∏—Å–ª—è–µ–º hit rate –∫—ç—à–∞
            const totalHits = cacheInfo.entries.reduce((sum, entry) => sum + entry.hitCount, 0)
            const cacheHitRate = cacheInfo.size > 0 ? totalHits / cacheInfo.size : 0

            return {
                totalRequests: stats.totalRequests,
                averageResponseTime: stats.averageResponseTime,
                cacheHitRate,
                modelUtilization: {} // TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å —Å–±–æ—Ä –º–µ—Ç—Ä–∏–∫ –ø–æ –º–æ–¥–µ–ª—è–º
            }
        } catch (error) {
            console.error('Error getting performance metrics:', error)
            return {
                totalRequests: 0,
                averageResponseTime: 0,
                cacheHitRate: 0,
                modelUtilization: {}
            }
        }
    }

    /**
     * –û—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤ (–≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —Ä–∞–±–æ—Ç—ã)
     */
    public static async cleanup(): Promise<void> {
        try {
            console.log('üßπ Cleaning up AI Master module...')

            // –û—á–∏—â–∞–µ–º –∫—ç—à
            this.service.clearCache()

            // TODO: –î–æ–±–∞–≤–∏—Ç—å –¥—Ä—É–≥–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ –æ—á–∏—Å—Ç–∫–∏

            console.log('‚úÖ AI Master module cleanup completed')
        } catch (error) {
            console.error('‚ùå Error during AI Master module cleanup:', error)
        }
    }

    /**
     * –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ (–≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏)
     */
    public static async performMaintenance(): Promise<void> {
        try {
            console.log('üîß Performing AI Master maintenance...')

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–¥–æ—Ä–æ–≤—å–µ —Å–∏—Å—Ç–µ–º—ã
            const health = await this.service.checkHealth()
            if (!health.ollama) {
                console.warn('‚ö†Ô∏è Ollama health check failed during maintenance')
            }

            // –û—á–∏—â–∞–µ–º —É—Å—Ç–∞—Ä–µ–≤—à–∏–π –∫—ç—à (—ç—Ç–æ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏, –Ω–æ –º–æ–∂–Ω–æ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ)
            // this.service.clearCache()

            // TODO: –î–æ–±–∞–≤–∏—Ç—å –¥—Ä—É–≥–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è:
            // - –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –ø—Ä–æ–º–ø—Ç–æ–≤
            // - –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
            // - –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –º–æ–¥–µ–ª–µ–π

            console.log('‚úÖ AI Master maintenance completed')
        } catch (error) {
            console.error('‚ùå Error during AI Master maintenance:', error)
        }
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
     */
    public static async getDiagnostics(): Promise<{
        status: 'healthy' | 'degraded' | 'unhealthy'
        issues: string[]
        recommendations: string[]
        uptime: number
        lastError?: string
    }> {
        try {
            const startTime = Date.now()
            const health = await this.service.checkHealth()
            const responseTime = Date.now() - startTime

            const issues: string[] = []
            const recommendations: string[] = []
            let status: 'healthy' | 'degraded' | 'unhealthy' = 'healthy'

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º Ollama
            if (!health.ollama) {
                issues.push('Ollama service is not responding')
                recommendations.push('Check Ollama installation and service status')
                status = 'unhealthy'
            }

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–æ–¥–µ–ª–∏
            if (health.models.length === 0) {
                issues.push('No AI models are available')
                recommendations.push('Install required AI models in Ollama')
                status = 'unhealthy'
            }

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞
            if (responseTime > 5000) {
                issues.push('High response time detected')
                recommendations.push('Consider optimizing model parameters or hardware')
                if (status === 'healthy') status = 'degraded'
            }

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä –æ—á–µ—Ä–µ–¥–∏
            if (health.queueSize > 10) {
                issues.push('High request queue size')
                recommendations.push('Consider scaling AI service or optimizing requests')
                if (status === 'healthy') status = 'degraded'
            }

            return {
                status,
                issues,
                recommendations,
                uptime: process.uptime(),
                lastError: undefined // TODO: –û—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–µ –æ—à–∏–±–∫–∏
            }
        } catch (error) {
            return {
                status: 'unhealthy',
                issues: ['Failed to perform diagnostics'],
                recommendations: ['Check AI Master service configuration'],
                uptime: 0,
                lastError: error instanceof Error ? error.message : 'Unknown error'
            }
        }
    }
}

// –≠–∫—Å–ø–æ—Ä—Ç—ã –¥–ª—è —É–¥–æ–±–Ω–æ–≥–æ –∏–º–ø–æ—Ä—Ç–∞
export { AIMasterService } from './ai-master.service'
export { AIMasterController } from './ai-master.controller'
export { OllamaService } from './ollama.service'
export { PromptLibraryService } from './prompt-library'
export { aiMasterRouter } from './ai-master.router'
export * from './ai-master.types'