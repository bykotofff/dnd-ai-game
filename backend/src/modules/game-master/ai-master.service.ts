// backend/src/modules/game-master/ai-master.service.ts
import {
    AIRequestDto,
    AIResponse,
    AIRequestContext,
    AIMasterError,
    AIProcessingResult,
    GameMasterSettings,
    AIInteractionHistory,
    AIStats,
    AIResponseCache
} from './ai-master.types'
import { SessionService } from '@modules/sessions/session.service'
import { CharacterService } from '@modules/characters/character.service'
import { OllamaService } from './ollama.service'
import { PromptLibraryService } from './prompt-library'
import { db } from '@shared/database/database.service'

export class AIMasterService {
    private ollamaService: OllamaService
    private promptLibrary: PromptLibraryService
    private sessionService: SessionService
    private characterService: CharacterService
    private responseCache: Map<string, AIResponseCache> = new Map()
    private processingQueue: Map<string, Promise<AIProcessingResult>> = new Map()

    constructor() {
        this.ollamaService = new OllamaService()
        this.promptLibrary = PromptLibraryService.getInstance()
        this.sessionService = new SessionService()
        this.characterService = new CharacterService()

        // –û—á–∏—Å—Ç–∫–∞ –∫—ç—à–∞ –∫–∞–∂–¥—ã–µ 30 –º–∏–Ω—É—Ç
        setInterval(() => this.cleanupCache(), 30 * 60 * 1000)
    }

    /**
     * –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∏–≥—Ä–æ–∫–∞ - –æ—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥
     */
    async processPlayerAction(request: AIRequestDto): Promise<AIResponse> {
        try {
            console.log(`üéØ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: ${request.requestType}`)

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à –¥–ª—è –æ–¥–∏–Ω–∞–∫–æ–≤—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
            const cacheKey = this.generateCacheKey(request)
            const cached = this.getCachedResponse(cacheKey)
            if (cached) {
                console.log('üì¶ –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç')
                return cached
            }

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è –ª–∏ —É–∂–µ —Ç–∞–∫–æ–π –∑–∞–ø—Ä–æ—Å
            if (this.processingQueue.has(cacheKey)) {
                console.log('‚è≥ –û–∂–∏–¥–∞–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∞–Ω–∞–ª–æ–≥–∏—á–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞')
                const result = await this.processingQueue.get(cacheKey)!
                if (result.success && result.response) {
                    return result.response
                }
            }

            // –°–æ–∑–¥–∞–µ–º –ø—Ä–æ–º–∏—Å –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
            const processingPromise = this.processRequest(request)
            this.processingQueue.set(cacheKey, processingPromise)

            try {
                const result = await processingPromise

                if (!result.success || !result.response) {
                    throw new AIMasterError(result.error || '–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞ –ò–ò')
                }

                // –ö—ç—à–∏—Ä—É–µ–º —É—Å–ø–µ—à–Ω—ã–π –æ—Ç–≤–µ—Ç
                this.cacheResponse(cacheKey, result.response)

                // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ –≤ –∏—Å—Ç–æ—Ä–∏—é
                await this.saveInteraction(request, result.response)

                // –õ–æ–≥–∏—Ä—É–µ–º –¥–µ–π—Å—Ç–≤–∏–µ –≤ —Å–µ—Å—Å–∏–∏
                await this.sessionService.logAction({
                    sessionId: request.sessionId,
                    characterId: request.characterId,
                    actionType: 'ai_response',
                    content: result.response.content,
                    metadata: {
                        requestType: request.requestType,
                        processingTime: result.response.metadata.processingTime,
                        aiResponseId: result.response.id
                    }
                })

                return result.response

            } finally {
                // –£–¥–∞–ª—è–µ–º –∏–∑ –æ—á–µ—Ä–µ–¥–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏
                this.processingQueue.delete(cacheKey)
            }

        } catch (error) {
            console.error('AI Master processing error:', error)

            if (error instanceof AIMasterError) {
                throw error
            }

            throw new AIMasterError('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞ –∫ –ò–ò –º–∞—Å—Ç–µ—Ä—É')
        }
    }

    /**
     * –í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞
     */
    private async processRequest(request: AIRequestDto): Promise<AIProcessingResult> {
        try {
            // –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –∏–≥—Ä–æ–≤–æ–π —Å–µ—Å—Å–∏–∏
            const context = await this.buildRequestContext(request)

            // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø—Ä–æ–º–ø—Ç
            const prompt = await this.generatePrompt(context)

            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ Ollama
            const result = await this.ollamaService.generateResponse(
                prompt,
                request.requestType,
                this.getModelConfigForRequest(request)
            )

            if (result.success && result.response) {
                // –û–±–æ–≥–∞—â–∞–µ–º –æ—Ç–≤–µ—Ç –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
                result.response = await this.enrichResponse(result.response, context)
            }

            return result

        } catch (error) {
            console.error('Request processing error:', error)
            return {
                success: false,
                error: error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'
            }
        }
    }

    /**
     * –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞
     */
    private async buildRequestContext(request: AIRequestDto): Promise<AIRequestContext> {
        try {
            // –ü–æ–ª—É—á–∞–µ–º –±–∞–∑–æ–≤—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç —Å–µ—Å—Å–∏–∏
            const aiContext = await this.sessionService.getAIContext(request.sessionId)

            // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–µ—Ä—Å–æ–Ω–∞–∂–µ –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω
            let characterInfo = null
            if (request.characterId) {
                // –ù–∞—Ö–æ–¥–∏–º userId –ø–æ characterId (–Ω—É–∂–Ω–æ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–∞–≤)
                const character = await db.character.findUnique({
                    where: { id: request.characterId },
                    include: { user: true }
                })

                if (character) {
                    characterInfo = await this.characterService.getCharacter(
                        request.characterId,
                        character.userId
                    )
                }
            }

            // –ü–æ–ª—É—á–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –æ—Ç–≤–µ—Ç—ã –ò–ò –¥–ª—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
            const previousResponses = await this.getRecentAIResponses(
                request.sessionId,
                5 // –ü–æ—Å–ª–µ–¥–Ω–∏–µ 5 –æ—Ç–≤–µ—Ç–æ–≤
            )

            const context: AIRequestContext = {
                ...aiContext,
                requestType: request.requestType,
                playerAction: request.playerAction,
                additionalContext: {
                    ...request.additionalContext,
                    character: characterInfo
                },
                previousResponses,
                constraints: request.constraints
            }

            return context

        } catch (error) {
            console.error('Error building request context:', error)
            throw new AIMasterError('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏–∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –∑–∞–ø—Ä–æ—Å–∞')
        }
    }

    /**
     * –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø—Ä–æ–º–ø—Ç–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
     */
    private async generatePrompt(context: AIRequestContext): Promise<string> {
        try {
            const language = context.constraints?.language || 'russian'
            const template = this.promptLibrary.getPromptByType(context.requestType, language)

            if (!template) {
                throw new AIMasterError(`–®–∞–±–ª–æ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è —Ç–∏–ø–∞: ${context.requestType}`)
            }

            // –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è —à–∞–±–ª–æ–Ω–∞
            const variables = this.prepareTemplateVariables(context)

            // –†–µ–Ω–¥–µ—Ä–∏–º –ø—Ä–æ–º–ø—Ç
            const prompt = this.promptLibrary.renderPrompt(template.id, variables)

            console.log(`üìù –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω –ø—Ä–æ–º–ø—Ç –¥–ª—è ${context.requestType}`)

            return prompt

        } catch (error) {
            console.error('Error generating prompt:', error)
            throw new AIMasterError('–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø—Ä–æ–º–ø—Ç–∞')
        }
    }

    /**
     * –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –¥–ª—è —à–∞–±–ª–æ–Ω–∞
     */
    private prepareTemplateVariables(context: AIRequestContext): Record<string, any> {
        const character = context.additionalContext?.character
        const worldState = context.worldState

        // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏—è
        const recentActions = context.recentActions
            .slice(0, 5)
            .map(action => `${action.actionType}: ${action.content}`)
            .join('\n')

        const variables = {
            // –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
            currentLocation: worldState.currentLocation,
            timeOfDay: worldState.timeOfDay,
            weather: worldState.weather,
            currentScene: context.currentScene,
            playerAction: context.playerAction || '',

            // –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–µ—Ä—Å–æ–Ω–∞–∂–µ
            characterName: character?.name || '–ü–µ—Ä—Å–æ–Ω–∞–∂',
            characterClass: character?.class || '',
            characterLevel: character?.level || 1,
            currentHP: character?.currentHP || 0,
            maxHP: character?.maxHP || 0,

            // –ö–æ–Ω—Ç–µ–∫—Å—Ç
            recentActions,
            npcsPresent: worldState.npcsInLocation.join(', '),
            questContext: worldState.activeQuests.join(', '),

            // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
            ...context.additionalContext
        }

        return variables
    }

    /**
     * –û–±–æ–≥–∞—â–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
     */
    private async enrichResponse(
        response: AIResponse,
        context: AIRequestContext
    ): Promise<AIResponse> {
        try {
            // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç –Ω–∞ –ø—Ä–µ–¥–º–µ—Ç —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π
            const content = response.content

            // –ò—â–µ–º —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ –±—Ä–æ—Å–∫–∞–º –∫–æ—Å—Ç–µ–π
            const dicePatterns = [
                /–±—Ä–æ—Å–æ–∫\s+(.*?)\s+–ø—Ä–æ—Ç–∏–≤\s+(\d+)/gi,
                /–ø—Ä–æ–≤–µ—Ä–∫–∞\s+(.*?)\s+DC\s*(\d+)/gi,
                /–±—Ä–æ—Å—å—Ç–µ?\s+(d\d+)/gi
            ]

            response.diceRollsRequired = []

            for (const pattern of dicePatterns) {
                const matches = content.matchAll(pattern)
                for (const match of matches) {
                    response.diceRollsRequired.push({
                        type: match[1] || 'd20',
                        purpose: `–ü—Ä–æ–≤–µ—Ä–∫–∞: ${match[0]}`,
                        dc: parseInt(match[2]) || undefined
                    })
                }
            }

            // –ò—â–µ–º –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –¥–µ–π—Å—Ç–≤–∏–π
            if (content.includes('–º–æ–∂–µ—Ç–µ') || content.includes('–º–æ–≥–ª–∏ –±—ã')) {
                response.suggestions = this.extractActionSuggestions(content)
            }

            // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ü–µ–Ω—ã
            response.sceneUpdates = this.detectSceneUpdates(content, context)

            return response

        } catch (error) {
            console.error('Error enriching response:', error)
            return response // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –Ω–µ–∏–∑–º–µ–Ω–µ–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç –ø—Ä–∏ –æ—à–∏–±–∫–µ
        }
    }

    /**
     * –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π –¥–µ–π—Å—Ç–≤–∏–π –∏–∑ —Ç–µ–∫—Å—Ç–∞
     */
    private extractActionSuggestions(content: string): any[] {
        const suggestions: any[] = []

        // –ü—Ä–æ—Å—Ç—ã–µ —ç–≤—Ä–∏—Å—Ç–∏–∫–∏ –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π
        if (content.includes('–ø—Ä–æ–≤–µ—Ä–∫–∞')) {
            suggestions.push({
                type: 'skill_check',
                description: '–í—ã–ø–æ–ª–Ω–∏—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É –Ω–∞–≤—ã–∫–∞'
            })
        }

        if (content.includes('–∞—Ç–∞–∫') || content.includes('—É–¥–∞—Ä')) {
            suggestions.push({
                type: 'attack',
                description: '–ê—Ç–∞–∫–æ–≤–∞—Ç—å –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∞'
            })
        }

        if (content.includes('–≥–æ–≤–æ—Ä') || content.includes('—Å–∫–∞–∑–∞—Ç—å')) {
            suggestions.push({
                type: 'dialogue',
                description: '–ù–∞—á–∞—Ç—å –¥–∏–∞–ª–æ–≥'
            })
        }

        return suggestions
    }

    /**
     * –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π —Å—Ü–µ–Ω—ã
     */
    private detectSceneUpdates(content: string, context: AIRequestContext): any[] {
        const updates: any[] = []

        // –ü–æ–∏—Å–∫ –∏–∑–º–µ–Ω–µ–Ω–∏–π –ª–æ–∫–∞—Ü–∏–∏
        const locationPattern = /(–ø–µ—Ä–µ—Ö–æ–¥|–¥–≤–∏–∂|–∏–¥—Ç–∏|–Ω–∞–ø—Ä–∞–≤–ª).*?(–≤|–∫|–Ω–∞)\s+([–ê-–Ø][–∞-—è\s]+)/gi
        const locationMatch = content.match(locationPattern)
        if (locationMatch) {
            updates.push({
                type: 'location_change',
                description: '–í–æ–∑–º–æ–∂–Ω–æ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ –ª–æ–∫–∞—Ü–∏–∏',
                newValue: locationMatch[0]
            })
        }

        // –ü–æ–∏—Å–∫ –∏–∑–º–µ–Ω–µ–Ω–∏–π –≤—Ä–µ–º–µ–Ω–∏
        if (content.includes('–Ω–∞—Å—Ç—É–ø') && (content.includes('–≤–µ—á–µ—Ä') || content.includes('—É—Ç—Ä–æ') || content.includes('–Ω–æ—á—å'))) {
            updates.push({
                type: 'time_change',
                description: '–ò–∑–º–µ–Ω–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ —Å—É—Ç–æ–∫'
            })
        }

        return updates
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–µ–¥–∞–≤–Ω–∏—Ö –æ—Ç–≤–µ—Ç–æ–≤ –ò–ò
     */
    private async getRecentAIResponses(sessionId: string, limit: number): Promise<AIResponse[]> {
        try {
            const actions = await this.sessionService.getActionLog(sessionId, 'system', limit * 2, 0)

            return actions
                .filter(action => action.actionType === 'ai_response')
                .slice(0, limit)
                .map(action => ({
                    id: action.metadata?.aiResponseId || action.id,
                    requestType: action.metadata?.requestType || 'player_action_response',
                    content: action.content,
                    metadata: {
                        processingTime: action.metadata?.processingTime || 0,
                        modelUsed: 'unknown',
                        tokenCount: Math.ceil(action.content.length / 4)
                    },
                    timestamp: action.timestamp
                })) as AIResponse[]

        } catch (error) {
            console.error('Error getting recent AI responses:', error)
            return []
        }
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –º–æ–¥–µ–ª–∏ –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞
     */
    private getModelConfigForRequest(request: AIRequestDto) {
        // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –º–æ–∂–Ω–æ –∏–∑–º–µ–Ω—è—Ç—å –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –∑–∞–ø—Ä–æ—Å–∞
        const baseConfig = {
            temperature: 0.8,
            maxTokens: 300
        }

        // –ü—Ä–∏–º–µ–Ω—è–µ–º –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –∏–∑ –∑–∞–ø—Ä–æ—Å–∞
        if (request.constraints?.maxLength) {
            baseConfig.maxTokens = Math.min(request.constraints.maxLength, 500)
        }

        // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–æ–Ω–æ–≤
        if (request.constraints?.tone) {
            switch (request.constraints.tone) {
                case 'serious':
                    baseConfig.temperature = 0.6
                    break
                case 'humorous':
                    baseConfig.temperature = 0.9
                    break
                case 'mysterious':
                    baseConfig.temperature = 0.7
                    break
                case 'dramatic':
                    baseConfig.temperature = 0.8
                    break
                case 'casual':
                    baseConfig.temperature = 0.8
                    break
            }
        }

        return baseConfig
    }

    // === –ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ ===

    /**
     * –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–ª—é—á–∞ –∫—ç—à–∞
     */
    private generateCacheKey(request: AIRequestDto): string {
        const keyParts = [
            request.requestType,
            request.sessionId,
            request.playerAction || '',
            JSON.stringify(request.constraints || {})
        ]

        return Buffer.from(keyParts.join('|')).toString('base64')
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞
     */
    private getCachedResponse(key: string): AIResponse | null {
        const cached = this.responseCache.get(key)

        if (cached && cached.expiresAt > new Date()) {
            cached.hitCount++
            return cached.response
        }

        if (cached) {
            this.responseCache.delete(key)
        }

        return null
    }

    /**
     * –ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞
     */
    private cacheResponse(key: string, response: AIResponse): void {
        const expiresAt = new Date(Date.now() + 10 * 60 * 1000) // 10 –º–∏–Ω—É—Ç

        this.responseCache.set(key, {
            key,
            response,
            expiresAt,
            hitCount: 0
        })
    }

    /**
     * –û—á–∏—Å—Ç–∫–∞ —É—Å—Ç–∞—Ä–µ–≤—à–µ–≥–æ –∫—ç—à–∞
     */
    private cleanupCache(): void {
        const now = new Date()
        let cleaned = 0

        for (const [key, cached] of this.responseCache.entries()) {
            if (cached.expiresAt <= now) {
                this.responseCache.delete(key)
                cleaned++
            }
        }

        if (cleaned > 0) {
            console.log(`üßπ –û—á–∏—â–µ–Ω–æ ${cleaned} –∑–∞–ø–∏—Å–µ–π –∏–∑ –∫—ç—à–∞ –ò–ò`)
        }
    }

    // === –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ ===

    /**
     * –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è –≤ –∏—Å—Ç–æ—Ä–∏—é
     */
    private async saveInteraction(request: AIRequestDto, response: AIResponse): Promise<void> {
        try {
            // TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –æ—Ç–¥–µ–ª—å–Ω—É—é —Ç–∞–±–ª–∏—Ü—É –¥–ª—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∏
            console.log(`üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ: ${request.requestType}`)
        } catch (error) {
            console.error('Error saving interaction:', error)
            // –ù–µ –≤—ã–±—Ä–∞—Å—ã–≤–∞–µ–º –æ—à–∏–±–∫—É, —Ç–∞–∫ –∫–∞–∫ —ç—Ç–æ –Ω–µ –∫—Ä–∏—Ç–∏—á–Ω–æ
        }
    }

    // === –ü—É–±–ª–∏—á–Ω—ã–µ –º–µ—Ç–æ–¥—ã –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è ===

    /**
     * –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è –ò–ò —Å–µ—Ä–≤–∏—Å–∞
     */
    async checkHealth(): Promise<{
        ollama: boolean
        models: string[]
        cacheSize: number
        queueSize: number
    }> {
        try {
            const ollamaHealth = await this.ollamaService.checkHealth()
            const availableModels = await this.ollamaService.getAvailableModels()

            return {
                ollama: ollamaHealth,
                models: availableModels,
                cacheSize: this.responseCache.size,
                queueSize: this.processingQueue.size
            }
        } catch (error) {
            console.error('Health check error:', error)
            return {
                ollama: false,
                models: [],
                cacheSize: this.responseCache.size,
                queueSize: this.processingQueue.size
            }
        }
    }

    /**
     * –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ–ø–∏—Å–∞–Ω–∏—è —Å—Ü–µ–Ω—ã
     */
    async generateSceneDescription(
        sessionId: string,
        locationName: string,
        additionalContext?: Record<string, any>
    ): Promise<AIResponse> {
        const request: AIRequestDto = {
            sessionId,
            requestType: 'scene_description',
            additionalContext: {
                locationName,
                ...additionalContext
            }
        }

        return this.processPlayerAction(request)
    }

    /**
     * –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–∏–∞–ª–æ–≥–∞ NPC
     */
    async generateNPCDialogue(
        sessionId: string,
        npcName: string,
        playerMessage: string,
        npcPersonality?: string
    ): Promise<AIResponse> {
        const request: AIRequestDto = {
            sessionId,
            requestType: 'npc_dialogue',
            playerAction: playerMessage,
            additionalContext: {
                npcName,
                npcPersonality: npcPersonality || '–¥—Ä—É–∂–µ–ª—é–±–Ω—ã–π'
            }
        }

        return this.processPlayerAction(request)
    }

    /**
     * –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –±–æ–µ–≤–æ–≥–æ –ø–æ–≤–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è
     */
    async generateCombatNarration(
        sessionId: string,
        combatAction: string,
        result: {
            hit: boolean
            damage?: number
            critical?: boolean
        }
    ): Promise<AIResponse> {
        const request: AIRequestDto = {
            sessionId,
            requestType: 'combat_narration',
            playerAction: combatAction,
            additionalContext: {
                combatResult: result
            }
        }

        return this.processPlayerAction(request)
    }

    /**
     * –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –Ω–æ–≤–æ–≥–æ –∫–≤–µ—Å—Ç–∞
     */
    async generateQuest(
        sessionId: string,
        questType: 'main' | 'side' | 'personal' = 'side',
        difficulty: 'easy' | 'medium' | 'hard' = 'medium'
    ): Promise<AIResponse> {
        const request: AIRequestDto = {
            sessionId,
            requestType: 'quest_generation',
            additionalContext: {
                questType,
                difficulty
            }
        }

        return this.processPlayerAction(request)
    }

    /**
     * –ê–Ω–∞–ª–∏–∑ –ø–æ—Å–ª–µ–¥—Å—Ç–≤–∏–π –¥–µ–π—Å—Ç–≤–∏–π –∏–≥—Ä–æ–∫–æ–≤
     */
    async analyzeConsequences(
        sessionId: string,
        playerActions: string[],
        timeframe: 'immediate' | 'short_term' | 'long_term' = 'immediate'
    ): Promise<AIResponse> {
        const request: AIRequestDto = {
            sessionId,
            requestType: 'consequence_analysis',
            additionalContext: {
                playerActions,
                timeframe
            }
        }

        return this.processPlayerAction(request)
    }

    /**
     * –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–ª—É—á–∞–π–Ω–æ–π –≤—Å—Ç—Ä–µ—á–∏
     */
    async generateRandomEncounter(
        sessionId: string,
        environment: string,
        partyLevel: number
    ): Promise<AIResponse> {
        const request: AIRequestDto = {
            sessionId,
            requestType: 'random_encounter',
            additionalContext: {
                environment,
                partyLevel
            }
        }

        return this.processPlayerAction(request)
    }

    /**
     * –†–∞–∑–≤–∏—Ç–∏–µ —Å—é–∂–µ—Ç–∞
     */
    async progressStory(
        sessionId: string,
        majorEvents: string[],
        desiredDirection?: string
    ): Promise<AIResponse> {
        const request: AIRequestDto = {
            sessionId,
            requestType: 'story_progression',
            additionalContext: {
                majorEvents,
                desiredDirection
            }
        }

        return this.processPlayerAction(request)
    }

    /**
     * –°–æ–∑–¥–∞–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –º–∏—Ä–∞
     */
    async buildWorldElement(
        sessionId: string,
        elementType: 'location' | 'organization' | 'culture' | 'history',
        theme: string
    ): Promise<AIResponse> {
        const request: AIRequestDto = {
            sessionId,
            requestType: 'world_building',
            additionalContext: {
                elementType,
                theme
            }
        }

        return this.processPlayerAction(request)
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ò–ò
     */
    async getUsageStats(sessionId?: string): Promise<AIStats> {
        try {
            // TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å —Å–±–æ—Ä —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
            const ollamaStats = this.ollamaService.getUsageStats()

            return {
                totalRequests: ollamaStats.totalRequests,
                averageResponseTime: ollamaStats.averageResponseTime,
                totalTokensUsed: 0, // –ü–æ–¥—Å—á–∏—Ç–∞—Ç—å –∏–∑ –ª–æ–≥–æ–≤
                responsesByType: {
                    'player_action_response': 0,
                    'scene_description': 0,
                    'npc_dialogue': 0,
                    'combat_narration': 0,
                    'quest_generation': 0,
                    'story_progression': 0,
                    'world_building': 0,
                    'random_encounter': 0,
                    'consequence_analysis': 0
                },
                playerSatisfactionRating: 0.8, // –°—Ä–µ–¥–Ω—è—è –æ—Ü–µ–Ω–∫–∞
                successfulQuestGenerations: 0,
                uniqueNPCsCreated: 0
            }
        } catch (error) {
            console.error('Error getting usage stats:', error)
            throw new AIMasterError('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏')
        }
    }

    /**
     * –û—á–∏—Å—Ç–∫–∞ –∫—ç—à–∞
     */
    clearCache(): void {
        this.responseCache.clear()
        console.log('üßπ –ö—ç—à –ò–ò –æ—á–∏—â–µ–Ω')
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–∞ –∫—ç—à–∞
     */
    getCacheInfo(): {
        size: number
        entries: Array<{
            key: string
            expiresAt: Date
            hitCount: number
        }>
    } {
        const entries = Array.from(this.responseCache.values()).map(cached => ({
            key: cached.key,
            expiresAt: cached.expiresAt,
            hitCount: cached.hitCount
        }))

        return {
            size: this.responseCache.size,
            entries
        }
    }

    /**
     * –ü—Ä–µ–¥–∑–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ–ª–µ–π
     */
    async preloadModels(): Promise<boolean> {
        try {
            console.log('üöÄ –ü—Ä–µ–¥–∑–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ–ª–µ–π –ò–ò...')

            const config = this.ollamaService.getConfig()
            const modelsToLoad = Object.values(config.models)

            for (const model of modelsToLoad) {
                console.log(`üì• –ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ–ª–∏: ${model}`)
                await this.ollamaService.loadModel(model)
            }

            console.log('‚úÖ –í—Å–µ –º–æ–¥–µ–ª–∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã')
            return true
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–µ–¥–∑–∞–≥—Ä—É–∑–∫–∏ –º–æ–¥–µ–ª–µ–π:', error)
            return false
        }
    }

    /**
     * –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –º–∞—Å—Ç–µ—Ä–∞ –∏–≥—Ä—ã
     */
    async setGameMasterSettings(
        sessionId: string,
        settings: GameMasterSettings
    ): Promise<void> {
        try {
            // TODO: –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å–µ—Å—Å–∏–∏
            console.log(`‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ò–ò –º–∞—Å—Ç–µ—Ä–∞ –æ–±–Ω–æ–≤–ª–µ–Ω—ã –¥–ª—è —Å–µ—Å—Å–∏–∏ ${sessionId}`)
        } catch (error) {
            console.error('Error setting GM settings:', error)
            throw new AIMasterError('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –º–∞—Å—Ç–µ—Ä–∞ –∏–≥—Ä—ã')
        }
    }

    /**
     * –≠–∫—Å–ø–æ—Ä—Ç –∏—Å—Ç–æ—Ä–∏–∏ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–π
     */
    async exportInteractionHistory(sessionId: string): Promise<AIInteractionHistory> {
        try {
            // TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å —ç–∫—Å–ø–æ—Ä—Ç –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
            return {
                sessionId,
                interactions: []
            }
        } catch (error) {
            console.error('Error exporting interaction history:', error)
            throw new AIMasterError('–û—à–∏–±–∫–∞ –ø—Ä–∏ —ç–∫—Å–ø–æ—Ä—Ç–µ –∏—Å—Ç–æ—Ä–∏–∏ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–π')
        }
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è –∏–≥—Ä—ã
     */
    async getGameplayRecommendations(sessionId: string): Promise<{
        recommendations: string[]
        insights: string[]
    }> {
        try {
            // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏—è –∏ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
            const context = await this.sessionService.getAIContext(sessionId)

            const request: AIRequestDto = {
                sessionId,
                requestType: 'consequence_analysis',
                additionalContext: {
                    analysisType: 'gameplay_recommendations'
                },
                constraints: {
                    tone: 'helpful',
                    maxLength: 400
                }
            }

            const response = await this.processPlayerAction(request)

            return {
                recommendations: [response.content],
                insights: ['–ê–Ω–∞–ª–∏–∑ –æ—Å–Ω–æ–≤–∞–Ω –Ω–∞ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –¥–µ–π—Å—Ç–≤–∏—è—Ö –∏–≥—Ä–æ–∫–æ–≤']
            }
        } catch (error) {
            console.error('Error getting gameplay recommendations:', error)
            return {
                recommendations: ['–ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –∏—Å—Å–ª–µ–¥–æ–≤–∞—Ç—å –º–∏—Ä –∏ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–æ–≤–∞—Ç—å —Å NPC'],
                insights: ['–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞']
            }
        }
    }

    /**
     * –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ò–ò —Å –ø—Ä–∏–º–µ—Ä–æ–º –∑–∞–ø—Ä–æ—Å–∞
     */
    async testAI(sessionId: string): Promise<{
        success: boolean
        response?: string
        error?: string
        latency: number
    }> {
        const startTime = Date.now()

        try {
            const testRequest: AIRequestDto = {
                sessionId,
                requestType: 'scene_description',
                additionalContext: {
                    locationName: '–¢–µ—Å—Ç–æ–≤–∞—è –ª–æ–∫–∞—Ü–∏—è',
                    testing: true
                }
            }

            const response = await this.processPlayerAction(testRequest)
            const latency = Date.now() - startTime

            return {
                success: true,
                response: response.content,
                latency
            }
        } catch (error) {
            const latency = Date.now() - startTime

            return {
                success: false,
                error: error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞',
                latency
            }
        }
    }
}