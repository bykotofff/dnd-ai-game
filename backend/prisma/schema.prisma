generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Пользователи
model User {
  id        String   @id @default(cuid())
  email     String   @unique
  username  String   @unique
  password  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Связи
  characters     Character[]
  sessionPlayers GameSessionPlayer[]
  masterSessions GameSession[]       @relation("GameMaster")
  actionLogs     ActionLog[]
  createdInvites SessionInvite[]     @relation("InviteCreator")

  @@map("users")
}

// Персонажи
model Character {
  id         String @id @default(cuid())
  userId     String
  name       String
  race       String
  class      String
  level      Int    @default(1)
  experience Int    @default(0)

  // Характеристики D&D 5e
  strength     Int @default(10)
  dexterity    Int @default(10)
  constitution Int @default(10)
  intelligence Int @default(10)
  wisdom       Int @default(10)
  charisma     Int @default(10)

  // Здоровье
  currentHP   Int
  maxHP       Int
  temporaryHP Int @default(0)

  // Дополнительные характеристики
  armorClass Int @default(10)
  initiative Int @default(0)
  speed      Int @default(30)

  // Текстовые поля
  backstory  String
  motivation String
  alignment  String

  // JSON поля для сложных данных
  skills            Json // Навыки и владения
  equipment         Json // Инвентарь
  spells            Json? // Заклинания (если есть)
  features          Json // Способности класса/расы
  personalityTraits Json // Черты характера

  // Изображения
  profileImage String?

  // Связи
  user           User                @relation(fields: [userId], references: [id], onDelete: Cascade)
  sessionPlayers GameSessionPlayer[]
  actionLogs     ActionLog[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("characters")
}

// Игровые сессии
model GameSession {
  id          String  @id @default(cuid())
  name        String
  description String?
  maxPlayers  Int     @default(6)
  isActive    Boolean @default(true)
  isPublic    Boolean @default(false)

  // Состояние игры
  currentScene String
  worldState   Json // Состояние мира
  gameSettings Json // Настройки игры

  // Изображения
  mapImage   String?
  sceneImage String?

  // Мастер игры
  gameMasterId String

  // Связи
  gameMaster User                @relation("GameMaster", fields: [gameMasterId], references: [id])
  players    GameSessionPlayer[]
  actionLogs ActionLog[]
  invites    SessionInvite[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("game_sessions")
}

// Участники игровых сессий
model GameSessionPlayer {
  id           String   @id @default(cuid())
  sessionId    String
  userId       String
  characterId  String
  isGameMaster Boolean  @default(false)
  joinedAt     DateTime @default(now())
  lastActivity DateTime @default(now())

  // Связи
  session   GameSession @relation(fields: [sessionId], references: [id], onDelete: Cascade)
  user      User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  character Character   @relation(fields: [characterId], references: [id], onDelete: Cascade)

  // Уникальность: один пользователь - один персонаж на сессию
  @@unique([sessionId, userId])
  @@unique([sessionId, characterId])
  @@map("game_session_players")
}

// Лог действий в игре
model ActionLog {
  id          String   @id @default(cuid())
  sessionId   String
  userId      String?
  characterId String?
  actionType  String // 'player_action', 'ai_response', 'dice_roll', etc.
  content     String
  metadata    Json? // Дополнительные данные
  timestamp   DateTime @default(now())

  // Связи
  session   GameSession @relation(fields: [sessionId], references: [id], onDelete: Cascade)
  user      User?       @relation(fields: [userId], references: [id], onDelete: SetNull)
  character Character?  @relation(fields: [characterId], references: [id], onDelete: SetNull)

  @@map("action_logs")
}

// Приглашения в сессии
model SessionInvite {
  id        String   @id @default(cuid())
  sessionId String
  code      String   @unique
  createdBy String
  expiresAt DateTime
  maxUses   Int? // Максимальное количество использований
  usedCount Int      @default(0)
  isActive  Boolean  @default(true)

  // Связи
  session GameSession @relation(fields: [sessionId], references: [id], onDelete: Cascade)
  creator User        @relation("InviteCreator", fields: [createdBy], references: [id])

  createdAt DateTime @default(now())

  @@map("session_invites")
}
