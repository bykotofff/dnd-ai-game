// frontend/src/components/character/ability-scores.tsx
import { useState, useEffect } from 'react'
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card'
import { Button } from '@/components/ui/button'
import { Badge } from '@/components/ui/badge'
import { Slider } from '@/components/ui/slider'
import {
    Minus,
    Plus,
    RotateCcw,
    Info,
    TrendingUp,
    TrendingDown,
    AlertTriangle
} from 'lucide-react'
import { AbilityScores as AbilityScoresType } from '@/types'
import { cn } from '@/lib/utils'

interface AbilityScoresProps {
    scores: AbilityScoresType
    onScoresChange: (scores: AbilityScoresType) => void
    selectedRace?: string
    selectedClass?: string
    error?: string
}

// –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞—Ö
const ABILITY_INFO = {
    strength: {
        name: '–°–∏–ª–∞',
        shortName: '–°–ò–õ',
        description: '–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Ñ–∏–∑–∏—á–µ—Å–∫—É—é –º–æ—â—å, —É—Ä–æ–Ω –æ—Ä—É–∂–∏–µ–º –±–ª–∏–∂–Ω–µ–≥–æ –±–æ—è',
        icon: 'üí™',
        color: 'from-red-500 to-orange-500',
        skills: ['–ê—Ç–ª–µ—Ç–∏–∫–∞']
    },
    dexterity: {
        name: '–õ–æ–≤–∫–æ—Å—Ç—å',
        shortName: '–õ–û–í',
        description: '–í–ª–∏—è–µ—Ç –Ω–∞ –ö–ë, –∏–Ω–∏—Ü–∏–∞—Ç–∏–≤—É, —Å–∫—Ä—ã—Ç–Ω–æ—Å—Ç—å –∏ —Ç–æ—á–Ω–æ—Å—Ç—å',
        icon: 'üèÉ',
        color: 'from-green-500 to-emerald-500',
        skills: ['–ê–∫—Ä–æ–±–∞—Ç–∏–∫–∞', '–õ–æ–≤–∫–æ—Å—Ç—å —Ä—É–∫', '–°–∫—Ä—ã—Ç–Ω–æ—Å—Ç—å']
    },
    constitution: {
        name: '–¢–µ–ª–æ—Å–ª–æ–∂–µ–Ω–∏–µ',
        shortName: '–¢–ï–õ',
        description: '–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–¥–æ—Ä–æ–≤—å—è –∏ –≤—ã–Ω–æ—Å–ª–∏–≤–æ—Å—Ç—å',
        icon: '‚ù§Ô∏è',
        color: 'from-pink-500 to-red-500',
        skills: ['–°–ø–∞—Å–±—Ä–æ—Å–∫–∏ –Ω–∞ –∫–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ü–∏—é']
    },
    intelligence: {
        name: '–ò–Ω—Ç–µ–ª–ª–µ–∫—Ç',
        shortName: '–ò–ù–¢',
        description: '–í–ª–∏—è–µ—Ç –Ω–∞ –º–∞–≥–∏—é –≤–æ–ª—à–µ–±–Ω–∏–∫–æ–≤ –∏ –∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏–µ –Ω–∞–≤—ã–∫–∏',
        icon: 'üß†',
        color: 'from-blue-500 to-indigo-500',
        skills: ['–ê—Ä–∫–∞–Ω–∞', '–ò—Å—Ç–æ—Ä–∏—è', '–†–∞—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ', '–ü—Ä–∏—Ä–æ–¥–∞', '–†–µ–ª–∏–≥–∏—è']
    },
    wisdom: {
        name: '–ú—É–¥—Ä–æ—Å—Ç—å',
        shortName: '–ú–£–î',
        description: '–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –≤–æ—Å–ø—Ä–∏—è—Ç–∏–µ –∏ –∏–Ω—Ç—É–∏—Ü–∏—é',
        icon: 'üëÅÔ∏è',
        color: 'from-amber-500 to-yellow-500',
        skills: ['–í–æ—Å–ø—Ä–∏—è—Ç–∏–µ', '–ü—Ä–æ–Ω–∏—Ü–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å', '–ú–µ–¥–∏—Ü–∏–Ω–∞', '–í—ã–∂–∏–≤–∞–Ω–∏–µ', '–û–±—Ä–∞—â–µ–Ω–∏–µ —Å –∂–∏–≤–æ—Ç–Ω—ã–º–∏']
    },
    charisma: {
        name: '–•–∞—Ä–∏–∑–º–∞',
        shortName: '–•–ê–†',
        description: '–í–ª–∏—è–µ—Ç –Ω–∞ —Å–æ—Ü–∏–∞–ª—å–Ω—ã–µ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è –∏ –Ω–µ–∫–æ—Ç–æ—Ä—É—é –º–∞–≥–∏—é',
        icon: '‚ú®',
        color: 'from-purple-500 to-pink-500',
        skills: ['–£–±–µ–∂–¥–µ–Ω–∏–µ', '–û–±–º–∞–Ω', '–ó–∞–ø—É–≥–∏–≤–∞–Ω–∏–µ', '–í—ã—Å—Ç—É–ø–ª–µ–Ω–∏–µ']
    }
} as const

// –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç—ã —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫ –¥–ª—è –∫–ª–∞—Å—Å–æ–≤
const CLASS_PRIORITIES: Record<string, { primary: string[], secondary: string[] }> = {
    'BARBARIAN': { primary: ['strength', 'constitution'], secondary: ['dexterity'] },
    'BARD': { primary: ['charisma'], secondary: ['dexterity', 'constitution'] },
    'CLERIC': { primary: ['wisdom'], secondary: ['strength', 'constitution'] },
    'DRUID': { primary: ['wisdom'], secondary: ['constitution', 'dexterity'] },
    'FIGHTER': { primary: ['strength', 'dexterity'], secondary: ['constitution'] },
    'MONK': { primary: ['dexterity', 'wisdom'], secondary: ['constitution'] },
    'PALADIN': { primary: ['strength', 'charisma'], secondary: ['constitution'] },
    'RANGER': { primary: ['dexterity', 'wisdom'], secondary: ['constitution'] },
    'ROGUE': { primary: ['dexterity'], secondary: ['intelligence', 'wisdom'] },
    'SORCERER': { primary: ['charisma'], secondary: ['constitution', 'dexterity'] },
    'WARLOCK': { primary: ['charisma'], secondary: ['constitution', 'dexterity'] },
    'WIZARD': { primary: ['intelligence'], secondary: ['constitution', 'dexterity'] }
}

// –†–∞—Å–æ–≤—ã–µ –±–æ–Ω—É—Å—ã (—É–ø—Ä–æ—â–µ–Ω–Ω—ã–µ)
const RACIAL_BONUSES: Record<string, Partial<AbilityScoresType>> = {
    'HUMAN': { strength: 1, dexterity: 1, constitution: 1, intelligence: 1, wisdom: 1, charisma: 1 },
    'ELF': { dexterity: 2 },
    'DWARF': { constitution: 2 },
    'HALFLING': { dexterity: 2 },
    'DRAGONBORN': { strength: 2, charisma: 1 },
    'GNOME': { intelligence: 2 },
    'HALF_ELF': { charisma: 2 },
    'HALF_ORC': { strength: 2, constitution: 1 },
    'TIEFLING': { intelligence: 1, charisma: 2 }
}

function AbilityScoreInput({
                               ability,
                               value,
                               onChange,
                               isPrimary,
                               isSecondary,
                               racialBonus = 0,
                               remainingPoints,
                               maxPoints
                           }: {
    ability: keyof AbilityScoresType
    value: number
    onChange: (value: number) => void
    isPrimary: boolean
    isSecondary: boolean
    racialBonus?: number
    remainingPoints: number
    maxPoints: number
}) {
    const abilityInfo = ABILITY_INFO[ability]
    const finalValue = value + racialBonus
    const modifier = Math.floor((finalValue - 10) / 2)
    const cost = calculatePointCost(value)

    const canIncrease = value < 15 && remainingPoints >= calculatePointCost(value + 1) - cost
    const canDecrease = value > 8

    return (
        <Card className={cn(
            "transition-all duration-200 border-2",
            isPrimary && "border-green-500 bg-green-50 dark:bg-green-950/30",
            isSecondary && !isPrimary && "border-blue-500 bg-blue-50 dark:bg-blue-950/30",
            !isPrimary && !isSecondary && "border-muted"
        )}>
            <CardHeader className="pb-3">
                <div className="flex items-center justify-between">
                    <div className="flex items-center space-x-3">
                        <div className={cn(
                            "w-10 h-10 rounded-lg flex items-center justify-center text-white bg-gradient-to-br text-lg",
                            abilityInfo.color
                        )}>
                            {abilityInfo.icon}
                        </div>
                        <div>
                            <CardTitle className="text-lg">{abilityInfo.name}</CardTitle>
                            <div className="flex items-center space-x-2">
                                <Badge
                                    variant="outline"
                                    className={cn(
                                        "text-xs",
                                        isPrimary && "border-green-500 text-green-700 dark:text-green-300",
                                        isSecondary && !isPrimary && "border-blue-500 text-blue-700 dark:text-blue-300"
                                    )}
                                >
                                    {abilityInfo.shortName}
                                </Badge>
                                {isPrimary && (
                                    <Badge className="bg-green-100 text-green-800 dark:bg-green-900 dark:text-green-300 text-xs">
                                        –ö–ª—é—á–µ–≤–∞—è
                                    </Badge>
                                )}
                                {isSecondary && !isPrimary && (
                                    <Badge className="bg-blue-100 text-blue-800 dark:bg-blue-900 dark:text-blue-300 text-xs">
                                        –í–∞–∂–Ω–∞—è
                                    </Badge>
                                )}
                            </div>
                        </div>
                    </div>

                    {/* –ò—Ç–æ–≥–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –∏ –º–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä */}
                    <div className="text-right">
                        <div className="text-2xl font-bold flex items-baseline space-x-1">
                            <span>{finalValue}</span>
                            {racialBonus > 0 && (
                                <span className="text-sm text-green-600 dark:text-green-400">
                  (+{racialBonus})
                </span>
                            )}
                        </div>
                        <div className={cn(
                            "text-sm font-medium",
                            modifier >= 0 ? "text-green-600 dark:text-green-400" : "text-red-600 dark:text-red-400"
                        )}>
                            {modifier >= 0 ? '+' : ''}{modifier}
                        </div>
                    </div>
                </div>
            </CardHeader>

            <CardContent className="space-y-4">
                <CardDescription className="text-sm">
                    {abilityInfo.description}
                </CardDescription>

                {/* –ü–æ–ª–∑—É–Ω–æ–∫ –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ */}
                <div className="space-y-3">
                    <div className="flex items-center justify-between text-sm">
                        <span className="text-muted-foreground">–ë–∞–∑–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ:</span>
                        <span className="font-medium">{value}</span>
                    </div>

                    <div className="flex items-center space-x-2">
                        <Button
                            variant="outline"
                            size="sm"
                            onClick={() => onChange(value - 1)}
                            disabled={!canDecrease}
                            className="h-8 w-8 p-0"
                        >
                            <Minus className="h-3 w-3" />
                        </Button>

                        <div className="flex-1">
                            <Slider
                                value={[value]}
                                onValueChange={([newValue]) => onChange(newValue)}
                                min={8}
                                max={15}
                                step={1}
                                className="w-full"
                            />
                        </div>

                        <Button
                            variant="outline"
                            size="sm"
                            onClick={() => onChange(value + 1)}
                            disabled={!canIncrease}
                            className="h-8 w-8 p-0"
                        >
                            <Plus className="h-3 w-3" />
                        </Button>
                    </div>

                    <div className="flex justify-between text-xs text-muted-foreground">
                        <span>8</span>
                        <span>15</span>
                    </div>
                </div>

                {/* –°—Ç–æ–∏–º–æ—Å—Ç—å –≤ –æ—á–∫–∞—Ö */}
                <div className="flex justify-between items-center text-sm">
                    <span className="text-muted-foreground">–°—Ç–æ–∏–º–æ—Å—Ç—å:</span>
                    <span className="font-medium">{cost} –æ—á–∫.</span>
                </div>

                {/* –°–≤—è–∑–∞–Ω–Ω—ã–µ –Ω–∞–≤—ã–∫–∏ */}
                {abilityInfo.skills.length > 0 && (
                    <div>
                        <h5 className="text-xs font-medium text-muted-foreground mb-1">
                            –°–≤—è–∑–∞–Ω–Ω—ã–µ –Ω–∞–≤—ã–∫–∏:
                        </h5>
                        <div className="flex flex-wrap gap-1">
                            {abilityInfo.skills.slice(0, 2).map((skill) => (
                                <Badge key={skill} variant="outline" className="text-xs">
                                    {skill}
                                </Badge>
                            ))}
                            {abilityInfo.skills.length > 2 && (
                                <Badge variant="outline" className="text-xs">
                                    +{abilityInfo.skills.length - 2}
                                </Badge>
                            )}
                        </div>
                    </div>
                )}
            </CardContent>
        </Card>
    )
}

// –§—É–Ω–∫—Ü–∏—è —Ä–∞—Å—á–µ—Ç–∞ —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –æ—á–∫–æ–≤
function calculatePointCost(score: number): number {
    if (score <= 8) return 0
    if (score <= 13) return score - 8
    if (score === 14) return 7
    if (score === 15) return 9
    return 0
}

export function AbilityScores({
                                  scores,
                                  onScoresChange,
                                  selectedRace,
                                  selectedClass,
                                  error
                              }: AbilityScoresProps) {
    const [method, setMethod] = useState<'pointBuy' | 'standard' | 'rolled'>('pointBuy')
    const maxPoints = 27

    // –ü–æ–ª—É—á–∞–µ–º –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—ã –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –∫–ª–∞—Å—Å–∞
    const classPriorities = selectedClass ? CLASS_PRIORITIES[selectedClass] : { primary: [], secondary: [] }

    // –ü–æ–ª—É—á–∞–µ–º —Ä–∞—Å–æ–≤—ã–µ –±–æ–Ω—É—Å—ã
    const racialBonuses = selectedRace ? RACIAL_BONUSES[selectedRace] || {} : {}

    // –ü–æ–¥—Å—á–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã—Ö –æ—á–∫–æ–≤
    const usedPoints = Object.values(scores).reduce((total, score) => total + calculatePointCost(score), 0)
    const remainingPoints = maxPoints - usedPoints

    // –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –Ω–∞–±–æ—Ä —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫
    const standardArray = [15, 14, 13, 12, 10, 8]

    // –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–≥–æ –Ω–∞–±–æ—Ä–∞
    const applyStandardArray = () => {
        const newScores = { ...scores }
        const abilities = Object.keys(scores) as (keyof AbilityScoresType)[]

        // –°–æ—Ä—Ç–∏—Ä—É–µ–º —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ –ø–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—É
        const sortedAbilities = abilities.sort((a, b) => {
            const aIsPrimary = classPriorities.primary.includes(a)
            const bIsPrimary = classPriorities.primary.includes(b)
            const aIsSecondary = classPriorities.secondary.includes(a)
            const bIsSecondary = classPriorities.secondary.includes(b)

            if (aIsPrimary && !bIsPrimary) return -1
            if (!aIsPrimary && bIsPrimary) return 1
            if (aIsSecondary && !bIsSecondary) return -1
            if (!aIsSecondary && bIsSecondary) return 1
            return 0
        })

        // –ü—Ä–∏–º–µ–Ω—è–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
        sortedAbilities.forEach((ability, index) => {
            newScores[ability] = standardArray[index] || 8
        })

        onScoresChange(newScores)
        setMethod('standard')
    }

    // –°–±—Ä–æ—Å –∫ –±–∞–∑–æ–≤—ã–º –∑–Ω–∞—á–µ–Ω–∏—è–º
    const resetToBase = () => {
        const baseScores: AbilityScoresType = {
            strength: 8,
            dexterity: 8,
            constitution: 8,
            intelligence: 8,
            wisdom: 8,
            charisma: 8
        }
        onScoresChange(baseScores)
        setMethod('pointBuy')
    }

    const updateAbilityScore = (ability: keyof AbilityScoresType, value: number) => {
        const newScores = { ...scores, [ability]: value }
        onScoresChange(newScores)
    }

    return (
        <div className="space-y-6">
            <div>
                <h3 className="text-lg font-semibold mb-2">–†–∞—Å–ø—Ä–µ–¥–µ–ª–∏—Ç–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏</h3>
                <p className="text-muted-foreground mb-4">
                    –û–ø—Ä–µ–¥–µ–ª–∏—Ç–µ —Å–∏–ª—å–Ω—ã–µ –∏ —Å–ª–∞–±—ã–µ —Å—Ç–æ—Ä–æ–Ω—ã –≤–∞—à–µ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å–∏—Å—Ç–µ–º—É –ø–æ–∫—É–ø–∫–∏ –æ—á–∫–∞–º–∏ –∏–ª–∏ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –Ω–∞–±–æ—Ä.
                </p>
                {error && (
                    <p className="text-sm text-red-600 dark:text-red-400 mb-4">
                        {error}
                    </p>
                )}

                {/* –ú–µ—Ç–æ–¥—ã —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è */}
                <div className="flex flex-wrap gap-3 mb-6">
                    <Button
                        variant={method === 'pointBuy' ? 'default' : 'outline'}
                        onClick={() => setMethod('pointBuy')}
                        size="sm"
                    >
                        –ü–æ–∫—É–ø–∫–∞ –æ—á–∫–∞–º–∏
                    </Button>
                    <Button
                        variant={method === 'standard' ? 'default' : 'outline'}
                        onClick={applyStandardArray}
                        size="sm"
                    >
                        –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –Ω–∞–±–æ—Ä
                    </Button>
                    <Button
                        variant="outline"
                        onClick={resetToBase}
                        size="sm"
                    >
                        <RotateCcw className="h-4 w-4 mr-2" />
                        –°–±—Ä–æ—Å
                    </Button>
                </div>

                {/* –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –º–µ—Ç–æ–¥–µ */}
                {method === 'pointBuy' && (
                    <Card className="mb-6 bg-blue-50 dark:bg-blue-950/30 border-blue-200 dark:border-blue-800">
                        <CardContent className="p-4">
                            <div className="flex items-center justify-between">
                                <div className="flex items-center space-x-3">
                                    <Info className="h-5 w-5 text-blue-600" />
                                    <div>
                                        <h4 className="font-semibold text-blue-900 dark:text-blue-100">
                                            –ü–æ–∫—É–ø–∫–∞ –æ—á–∫–∞–º–∏
                                        </h4>
                                        <p className="text-sm text-blue-800 dark:text-blue-200">
                                            –£ –≤–∞—Å –µ—Å—Ç—å {maxPoints} –æ—á–∫–æ–≤ –¥–ª—è —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è. –í—ã—Å–æ–∫–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è —Å—Ç–æ—è—Ç –¥–æ—Ä–æ–∂–µ.
                                        </p>
                                    </div>
                                </div>
                                <div className="text-right">
                                    <div className="text-2xl font-bold text-blue-900 dark:text-blue-100">
                                        {remainingPoints}
                                    </div>
                                    <div className="text-sm text-blue-700 dark:text-blue-300">
                                        –æ—á–∫–æ–≤ –æ—Å—Ç–∞–ª–æ—Å—å
                                    </div>
                                </div>
                            </div>
                        </CardContent>
                    </Card>
                )}

                {method === 'standard' && (
                    <Card className="mb-6 bg-green-50 dark:bg-green-950/30 border-green-200 dark:border-green-800">
                        <CardContent className="p-4">
                            <div className="flex items-center space-x-3">
                                <TrendingUp className="h-5 w-5 text-green-600" />
                                <div>
                                    <h4 className="font-semibold text-green-900 dark:text-green-100">
                                        –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –Ω–∞–±–æ—Ä
                                    </h4>
                                    <p className="text-sm text-green-800 dark:text-green-200">
                                        –•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω—ã —Å —É—á–µ—Ç–æ–º –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–≤ –≤–∞—à–µ–≥–æ –∫–ª–∞—Å—Å–∞: {standardArray.join(', ')}
                                    </p>
                                </div>
                            </div>
                        </CardContent>
                    </Card>
                )}
            </div>

            {/* –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è */}
            {remainingPoints < 0 && method === 'pointBuy' && (
                <Card className="bg-red-50 dark:bg-red-950/30 border-red-200 dark:border-red-800">
                    <CardContent className="p-4">
                        <div className="flex items-center space-x-3">
                            <AlertTriangle className="h-5 w-5 text-red-600" />
                            <div>
                                <h4 className="font-semibold text-red-900 dark:text-red-100">
                                    –ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –æ—á–∫–æ–≤
                                </h4>
                                <p className="text-sm text-red-800 dark:text-red-200">
                                    –í—ã –ø–æ—Ç—Ä–∞—Ç–∏–ª–∏ –Ω–∞ {Math.abs(remainingPoints)} –æ—á–∫–æ–≤ –±–æ–ª—å—à–µ –ª–∏–º–∏—Ç–∞. –£–º–µ–Ω—å—à–∏—Ç–µ –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏.
                                </p>
                            </div>
                        </div>
                    </CardContent>
                </Card>
            )}

            {/* –°–µ—Ç–∫–∞ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫ */}
            <div className="grid grid-cols-1 md:grid-cols-2 xl:grid-cols-3 gap-4">
                {(Object.keys(scores) as (keyof AbilityScoresType)[]).map((ability) => (
                    <AbilityScoreInput
                        key={ability}
                        ability={ability}
                        value={scores[ability]}
                        onChange={(value) => updateAbilityScore(ability, value)}
                        isPrimary={classPriorities.primary.includes(ability)}
                        isSecondary={classPriorities.secondary.includes(ability)}
                        racialBonus={racialBonuses[ability] || 0}
                        remainingPoints={remainingPoints}
                        maxPoints={maxPoints}
                    />
                ))}
            </div>

            {/* –ò—Ç–æ–≥–æ–≤–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è */}
            <Card className="bg-gradient-to-r from-purple-50 to-blue-50 dark:from-purple-950/30 dark:to-blue-950/30 border-purple-200 dark:border-purple-800">
                <CardContent className="p-4">
                    <div className="grid grid-cols-2 md:grid-cols-4 gap-4 text-center">
                        <div>
                            <div className="text-lg font-bold text-purple-900 dark:text-purple-100">
                                {Object.values(scores).reduce((sum, score) => sum + score, 0) + Object.values(racialBonuses).reduce((sum, bonus) => sum + (bonus || 0), 0)}
                            </div>
                            <div className="text-sm text-purple-700 dark:text-purple-300">
                                –ò—Ç–æ–≥–æ –æ—á–∫–æ–≤
                            </div>
                        </div>
                        <div>
                            <div className="text-lg font-bold text-purple-900 dark:text-purple-100">
                                {Math.floor((Math.max(...Object.values(scores).map((score, i) => score + Object.values(racialBonuses)[i] || 0)) - 10) / 2)}
                            </div>
                            <div className="text-sm text-purple-700 dark:text-purple-300">
                                –õ—É—á—à–∏–π –º–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä
                            </div>
                        </div>
                        <div>
                            <div className="text-lg font-bold text-purple-900 dark:text-purple-100">
                                {Object.values(racialBonuses).reduce((sum, bonus) => sum + (bonus || 0), 0)}
                            </div>
                            <div className="text-sm text-purple-700 dark:text-purple-300">
                                –†–∞—Å–æ–≤—ã–µ –±–æ–Ω—É—Å—ã
                            </div>
                        </div>
                        <div>
                            <div className="text-lg font-bold text-purple-900 dark:text-purple-100">
                                {method === 'pointBuy' ? remainingPoints : 'N/A'}
                            </div>
                            <div className="text-sm text-purple-700 dark:text-purple-300">
                                –û—á–∫–æ–≤ –æ—Å—Ç–∞–ª–æ—Å—å
                            </div>
                        </div>
                    </div>
                </CardContent>
            </Card>
        </div>
    )
}